###############################################################################
#                                                                             #
#                                                       12/Oct/2015  10:21:26 #
# IAR ANSI C/C++ Compiler V5.50.7.22081/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\MyWirele #
#                    ssApp Demo Non Beacon (End Device)\MyWirelessApp Demo    #
#                    Non Beacon (End Device)\PLM\Source\Led\Led.c             #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\Led\Led.c" -D         #
#                    gMacStandAlone_d=1 -D gSAPMessagesEnableLlc_d=0 -D       #
#                    gZtcIncluded_d=0 -D gTargetMC1322xSRB=1 --preprocess     #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Debug\List\" -lC "C:\Documents   #
#                    and Settings\Administrator\Desktop\MyWirelessApp Demo    #
#                    Non Beacon (End Device)\MyWirelessApp Demo Non Beacon    #
#                    (End Device)\Debug\List\" -lB "C:\Documents and          #
#                    Settings\Administrator\Desktop\MyWirelessApp Demo Non    #
#                    Beacon (End Device)\MyWirelessApp Demo Non Beacon (End   #
#                    Device)\Debug\List\" --diag_suppress                     #
#                    Pe014,Pe001,Pe991,Pa039,Pe520 -o "C:\Documents and       #
#                    Settings\Administrator\Desktop\MyWirelessApp Demo Non    #
#                    Beacon (End Device)\MyWirelessApp Demo Non Beacon (End   #
#                    Device)\Debug\Obj\" --no_cse --no_unroll --no_inline     #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little                  #
#                    --cpu=ARM7TDMI-S --fpu=None --dlib_config "C:\Program    #
#                    Files\IAR Systems\Embedded Workbench 5.4                 #
#                    Evaluation\arm\INC\DLib_Config_Normal.h" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\MacPhy\Interface\" -I            #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Application\Init\" -I            #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Application\Interface\" -I       #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Application\Configure\" -I       #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Application\UartUtil\" -I        #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Application\Source\" -I          #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\SSM\TS\Interface\" -I            #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\SSM\TS\Source\" -I               #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\SSM\ZTC\Interface\" -I           #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\SSM\ZTC\Source\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Interface\" -I               #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\LibInterface\" -I            #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\Display\" -I          #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\Keyboard\" -I         #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\NVM\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\TMR\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\UART\" -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 5.4     #
#                    Evaluation\arm\INC\" --interwork --cpu_mode thumb -On    #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\MyWirele #
#                    ssApp Demo Non Beacon (End Device)\MyWirelessApp Demo    #
#                    Non Beacon (End Device)\Debug\List\Led.lst               #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\MyWirele #
#                    ssApp Demo Non Beacon (End Device)\MyWirelessApp Demo    #
#                    Non Beacon (End Device)\Debug\Obj\Led.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\MyWirelessApp Demo Non Beacon (End Device)\MyWirelessApp Demo Non Beacon (End Device)\PLM\Source\Led\Led.c
      1          /************************************************************************************
      2          *
      3          * This header file is for LED Driver Interface.
      4          *
      5          * Copyright (c) 2007, Freescale, Inc. All rights reserved.
      6          *
      7          *
      8          * No part of this document must be reproduced in any form - including copied,
      9          * transcribed, printed or by any electronic means - without specific written
     10          * permission from Freescale Semiconductor.
     11          *
     12          *****************************************************************************/
     13          #include "TMR_Interface.h"
     14          #include "Led.h"
     15          
     16          #if (gLEDSupported_d)
     17          
     18          /******************************************************************************
     19          *******************************************************************************
     20          * Public Macros
     21          *******************************************************************************
     22          ******************************************************************************/
     23          
     24          /*None*/
     25          
     26          /******************************************************************************
     27          *******************************************************************************
     28          * Private prototypes
     29          *******************************************************************************
     30          ******************************************************************************/
     31          static void LED_FlashTimeout(uint8_t timerId);
     32          #if gLEDBlipEnabled_d
     33          static void LED_DecrementBlip(void);
     34          #endif
     35          
     36          /******************************************************************************
     37          *******************************************************************************
     38          * Private type definitions
     39          *******************************************************************************
     40          ******************************************************************************/
     41          
     42          /******************************************************************************
     43          *******************************************************************************
     44          * Private Memory Declarations
     45          *******************************************************************************
     46          ******************************************************************************/
     47          

   \                                 In section .bss, align 1
     48          static bool_t mfLedInSerialMode;      /* doing serial lights */
   \                     mfLedInSerialMode:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     49          static uint8_t mLedFlashingLEDs = 0;  /* flashing LEDs */
   \                     mLedFlashingLEDs:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     50          static tmrTimerID_t mLEDTimerID = gTmrInvalidTimerID_c;
   \                     mLEDTimerID:
   \   00000000   FF                 DC8 255
     51          #if gLEDBlipEnabled_d
     52          static uint8_t mLedBlips[4];          /* enough for 4 LEDs to blip once */
     53          #endif
     54          
     55          /******************************************************************************
     56          *******************************************************************************
     57          * Public functions
     58          *******************************************************************************
     59          ******************************************************************************/
     60          
     61          /******************************************************************************
     62          * LED_Init
     63          *
     64          * Initialize the LED system.
     65          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     66          void LED_Init(void)
     67          {
   \                     LED_Init:
   \   00000000   80B5               PUSH     {R7,LR}
     68            /* Create and init all LEDs */
     69            InitLed();
   \   00000002   0F20               MOVS     R0,#+15
   \   00000004   ........           BL       Set_Pins
     70            
     71            /* allocate a timer for use in flashing LEDs */
     72            mLEDTimerID = TMR_AllocateTimer();
   \   00000008   ........           BL       TMR_AllocateTimer
   \   0000000C   ....               LDR      R1,??DataTable3
   \   0000000E   0870               STRB     R0,[R1, #+0]
     73            TurnOffLeds();
   \   00000010   ........           BL       LED_TurnOffAllLeds
     74          }
   \   00000014   09BC               POP      {R0,R3}
   \   00000016   1847               BX       R3               ;; return
     75          
     76          
     77          /******************************************************************************
     78          * Set_Pins
     79          *
     80          * Set a PIN with Direction Out, this PIN can be used as a LED.
     81          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     82          void Set_Pins( LED_t LEDNr )
     83          {
   \                     Set_Pins:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
     84            if (LEDNr & LED1){
   \   00000004   E007               LSLS     R0,R4,#+31
   \   00000006   0FD5               BPL      ??Set_Pins_0
     85              Gpio_SetPinFunction(LED1_PIN, gGpioNormalMode_c);
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   1720               MOVS     R0,#+23
   \   0000000C   ........           BL       Gpio_SetPinFunction
     86              Gpio_SetPinReadSource(LED1_PIN, gGpioPinReadReg_c);
   \   00000010   0121               MOVS     R1,#+1
   \   00000012   1720               MOVS     R0,#+23
   \   00000014   ........           BL       Gpio_SetPinReadSource
     87              Gpio_SetPinDir(LED1_PIN, gGpioDirOut_c);
   \   00000018   0121               MOVS     R1,#+1
   \   0000001A   1720               MOVS     R0,#+23
   \   0000001C   ........           BL       Gpio_SetPinDir
     88              Gpio_SetPinData(LED1_PIN, LED_RESET);
   \   00000020   0021               MOVS     R1,#+0
   \   00000022   1720               MOVS     R0,#+23
   \   00000024   ........           BL       Gpio_SetPinData
     89            }
     90            if (LEDNr & LED2){
   \                     ??Set_Pins_0:
   \   00000028   A007               LSLS     R0,R4,#+30
   \   0000002A   0FD5               BPL      ??Set_Pins_1
     91              Gpio_SetPinFunction(LED2_PIN, gGpioNormalMode_c);
   \   0000002C   0021               MOVS     R1,#+0
   \   0000002E   1820               MOVS     R0,#+24
   \   00000030   ........           BL       Gpio_SetPinFunction
     92              Gpio_SetPinReadSource(LED2_PIN, gGpioPinReadReg_c);
   \   00000034   0121               MOVS     R1,#+1
   \   00000036   1820               MOVS     R0,#+24
   \   00000038   ........           BL       Gpio_SetPinReadSource
     93              Gpio_SetPinDir(LED2_PIN, gGpioDirOut_c);
   \   0000003C   0121               MOVS     R1,#+1
   \   0000003E   1820               MOVS     R0,#+24
   \   00000040   ........           BL       Gpio_SetPinDir
     94              Gpio_SetPinData(LED2_PIN, LED_RESET);
   \   00000044   0021               MOVS     R1,#+0
   \   00000046   1820               MOVS     R0,#+24
   \   00000048   ........           BL       Gpio_SetPinData
     95            }
     96            if (LEDNr & LED3){
   \                     ??Set_Pins_1:
   \   0000004C   6007               LSLS     R0,R4,#+29
   \   0000004E   0FD5               BPL      ??Set_Pins_2
     97              Gpio_SetPinFunction(LED3_PIN, gGpioNormalMode_c);
   \   00000050   0021               MOVS     R1,#+0
   \   00000052   1920               MOVS     R0,#+25
   \   00000054   ........           BL       Gpio_SetPinFunction
     98              Gpio_SetPinReadSource(LED3_PIN, gGpioPinReadReg_c);
   \   00000058   0121               MOVS     R1,#+1
   \   0000005A   1920               MOVS     R0,#+25
   \   0000005C   ........           BL       Gpio_SetPinReadSource
     99              Gpio_SetPinDir(LED3_PIN, gGpioDirOut_c);
   \   00000060   0121               MOVS     R1,#+1
   \   00000062   1920               MOVS     R0,#+25
   \   00000064   ........           BL       Gpio_SetPinDir
    100              Gpio_SetPinData(LED3_PIN, LED_RESET);
   \   00000068   0021               MOVS     R1,#+0
   \   0000006A   1920               MOVS     R0,#+25
   \   0000006C   ........           BL       Gpio_SetPinData
    101            }
    102            if (LEDNr & LED4){
   \                     ??Set_Pins_2:
   \   00000070   2007               LSLS     R0,R4,#+28
   \   00000072   0FD5               BPL      ??Set_Pins_3
    103              Gpio_SetPinFunction(LED4_PIN, gGpioNormalMode_c);
   \   00000074   0021               MOVS     R1,#+0
   \   00000076   2C20               MOVS     R0,#+44
   \   00000078   ........           BL       Gpio_SetPinFunction
    104              Gpio_SetPinReadSource(LED4_PIN, gGpioPinReadReg_c);
   \   0000007C   0121               MOVS     R1,#+1
   \   0000007E   2C20               MOVS     R0,#+44
   \   00000080   ........           BL       Gpio_SetPinReadSource
    105              Gpio_SetPinDir(LED4_PIN, gGpioDirOut_c);
   \   00000084   0121               MOVS     R1,#+1
   \   00000086   2C20               MOVS     R0,#+44
   \   00000088   ........           BL       Gpio_SetPinDir
    106              Gpio_SetPinData(LED4_PIN, LED_RESET);
   \   0000008C   0021               MOVS     R1,#+0
   \   0000008E   2C20               MOVS     R0,#+44
   \   00000090   ........           BL       Gpio_SetPinData
    107            }
    108          }
   \                     ??Set_Pins_3:
   \   00000094   10BC               POP      {R4}
   \   00000096   08BC               POP      {R3}
   \   00000098   1847               BX       R3               ;; return
    109          
    110          /******************************************************************************
    111          * LED_GetLed
    112          *
    113          * Get LED state.
    114          *
    115          * gpioPinState      LED_SET signal        Logical LED State (ON/OFF)
    116          *      0                  0                        1
    117          *      0                  1                        0
    118          *      1                  0                        0
    119          *      1                  1                        1
    120          * -----------------------------------------------------
    121          * LED State (ON/OFF) = !(gpioPinState ^ LED_SET)
    122          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    123          LedState_t LED_GetLed( LED_t LEDNr)                      
    124          {
   \                     LED_GetLed:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
   \   00000004   0400               MOVS     R4,R0
    125            GpioPinState_t gpioPinState;
    126            LED_t LEDpinsState = 0;
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   0500               MOVS     R5,R0
    127            int8_t ReturnSingleLED = 0;
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   0600               MOVS     R6,R0
    128            
    129            if ( (LEDNr == LED1) || (LEDNr == LED2) || (LEDNr == LED3) || (LEDNr == LED4) )
   \   0000000E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000010   240E               LSRS     R4,R4,#+24
   \   00000012   012C               CMP      R4,#+1
   \   00000014   0BD0               BEQ      ??LED_GetLed_0
   \   00000016   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000018   240E               LSRS     R4,R4,#+24
   \   0000001A   022C               CMP      R4,#+2
   \   0000001C   07D0               BEQ      ??LED_GetLed_0
   \   0000001E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000020   240E               LSRS     R4,R4,#+24
   \   00000022   042C               CMP      R4,#+4
   \   00000024   03D0               BEQ      ??LED_GetLed_0
   \   00000026   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000028   240E               LSRS     R4,R4,#+24
   \   0000002A   082C               CMP      R4,#+8
   \   0000002C   02D1               BNE      ??LED_GetLed_1
    130              ReturnSingleLED = 1;
   \                     ??LED_GetLed_0:
   \   0000002E   0120               MOVS     R0,#+1
   \   00000030   0600               MOVS     R6,R0
   \   00000032   01E0               B        ??LED_GetLed_2
    131            else
    132              ReturnSingleLED = 0;
   \                     ??LED_GetLed_1:
   \   00000034   0020               MOVS     R0,#+0
   \   00000036   0600               MOVS     R6,R0
    133            
    134            if (LEDNr & LED1)
   \                     ??LED_GetLed_2:
   \   00000038   E007               LSLS     R0,R4,#+31
   \   0000003A   12D5               BPL      ??LED_GetLed_3
    135            {
    136              Gpio_GetPinData(LED1_PIN, &gpioPinState);
   \   0000003C   6946               MOV      R1,SP
   \   0000003E   1720               MOVS     R0,#+23
   \   00000040   ........           BL       Gpio_GetPinData
    137              gpioPinState = (GpioPinState_t)(1 - (gpioPinState ^ LED_SET));
   \   00000044   0120               MOVS     R0,#+1
   \   00000046   6946               MOV      R1,SP
   \   00000048   0978               LDRB     R1,[R1, #+0]
   \   0000004A   0122               MOVS     R2,#+1
   \   0000004C   4A40               EORS     R2,R2,R1
   \   0000004E   801A               SUBS     R0,R0,R2
   \   00000050   6946               MOV      R1,SP
   \   00000052   0870               STRB     R0,[R1, #+0]
    138              if (ReturnSingleLED)
   \   00000054   3606               LSLS     R6,R6,#+24       ;; SignExtS R6,R6,#+24,#+24
   \   00000056   3616               ASRS     R6,R6,#+24
   \   00000058   002E               CMP      R6,#+0
   \   0000005A   02D0               BEQ      ??LED_GetLed_3
    139                return gpioPinState;
   \   0000005C   6846               MOV      R0,SP
   \   0000005E   0078               LDRB     R0,[R0, #+0]
   \   00000060   54E0               B        ??LED_GetLed_4
    140            }
    141            LEDpinsState |= gpioPinState << 0;
   \                     ??LED_GetLed_3:
   \   00000062   2900               MOVS     R1,R5
   \   00000064   6846               MOV      R0,SP
   \   00000066   0578               LDRB     R5,[R0, #+0]
   \   00000068   0D43               ORRS     R5,R5,R1
    142            
    143            if (LEDNr & LED2)
   \   0000006A   A007               LSLS     R0,R4,#+30
   \   0000006C   12D5               BPL      ??LED_GetLed_5
    144            {
    145              Gpio_GetPinData(LED2_PIN, &gpioPinState);
   \   0000006E   6946               MOV      R1,SP
   \   00000070   1820               MOVS     R0,#+24
   \   00000072   ........           BL       Gpio_GetPinData
    146              gpioPinState = (GpioPinState_t)(1 - (gpioPinState ^ LED_SET));
   \   00000076   0120               MOVS     R0,#+1
   \   00000078   6946               MOV      R1,SP
   \   0000007A   0978               LDRB     R1,[R1, #+0]
   \   0000007C   0122               MOVS     R2,#+1
   \   0000007E   4A40               EORS     R2,R2,R1
   \   00000080   801A               SUBS     R0,R0,R2
   \   00000082   6946               MOV      R1,SP
   \   00000084   0870               STRB     R0,[R1, #+0]
    147              if (ReturnSingleLED)
   \   00000086   3606               LSLS     R6,R6,#+24       ;; SignExtS R6,R6,#+24,#+24
   \   00000088   3616               ASRS     R6,R6,#+24
   \   0000008A   002E               CMP      R6,#+0
   \   0000008C   02D0               BEQ      ??LED_GetLed_5
    148                return gpioPinState;
   \   0000008E   6846               MOV      R0,SP
   \   00000090   0078               LDRB     R0,[R0, #+0]
   \   00000092   3BE0               B        ??LED_GetLed_4
    149            }
    150            LEDpinsState |= gpioPinState << 1;
   \                     ??LED_GetLed_5:
   \   00000094   2900               MOVS     R1,R5
   \   00000096   6846               MOV      R0,SP
   \   00000098   0078               LDRB     R0,[R0, #+0]
   \   0000009A   4500               LSLS     R5,R0,#+1
   \   0000009C   0D43               ORRS     R5,R5,R1
    151            
    152            if (LEDNr & LED3)
   \   0000009E   6007               LSLS     R0,R4,#+29
   \   000000A0   12D5               BPL      ??LED_GetLed_6
    153            {
    154              Gpio_GetPinData(LED3_PIN, &gpioPinState);
   \   000000A2   6946               MOV      R1,SP
   \   000000A4   1920               MOVS     R0,#+25
   \   000000A6   ........           BL       Gpio_GetPinData
    155              gpioPinState = (GpioPinState_t)(1 - (gpioPinState ^ LED_SET));
   \   000000AA   0120               MOVS     R0,#+1
   \   000000AC   6946               MOV      R1,SP
   \   000000AE   0978               LDRB     R1,[R1, #+0]
   \   000000B0   0122               MOVS     R2,#+1
   \   000000B2   4A40               EORS     R2,R2,R1
   \   000000B4   801A               SUBS     R0,R0,R2
   \   000000B6   6946               MOV      R1,SP
   \   000000B8   0870               STRB     R0,[R1, #+0]
    156              if (ReturnSingleLED)
   \   000000BA   3606               LSLS     R6,R6,#+24       ;; SignExtS R6,R6,#+24,#+24
   \   000000BC   3616               ASRS     R6,R6,#+24
   \   000000BE   002E               CMP      R6,#+0
   \   000000C0   02D0               BEQ      ??LED_GetLed_6
    157                return gpioPinState;
   \   000000C2   6846               MOV      R0,SP
   \   000000C4   0078               LDRB     R0,[R0, #+0]
   \   000000C6   21E0               B        ??LED_GetLed_4
    158            }
    159            LEDpinsState |= gpioPinState << 2;
   \                     ??LED_GetLed_6:
   \   000000C8   2900               MOVS     R1,R5
   \   000000CA   6846               MOV      R0,SP
   \   000000CC   0078               LDRB     R0,[R0, #+0]
   \   000000CE   8500               LSLS     R5,R0,#+2
   \   000000D0   0D43               ORRS     R5,R5,R1
    160            
    161            if (LEDNr & LED4)
   \   000000D2   2007               LSLS     R0,R4,#+28
   \   000000D4   12D5               BPL      ??LED_GetLed_7
    162            {
    163              Gpio_GetPinData(LED4_PIN, &gpioPinState);
   \   000000D6   6946               MOV      R1,SP
   \   000000D8   2C20               MOVS     R0,#+44
   \   000000DA   ........           BL       Gpio_GetPinData
    164              gpioPinState = (GpioPinState_t)(1 - (gpioPinState ^ LED_SET));
   \   000000DE   0120               MOVS     R0,#+1
   \   000000E0   6946               MOV      R1,SP
   \   000000E2   0978               LDRB     R1,[R1, #+0]
   \   000000E4   0122               MOVS     R2,#+1
   \   000000E6   4A40               EORS     R2,R2,R1
   \   000000E8   801A               SUBS     R0,R0,R2
   \   000000EA   6946               MOV      R1,SP
   \   000000EC   0870               STRB     R0,[R1, #+0]
    165              if (ReturnSingleLED)
   \   000000EE   3606               LSLS     R6,R6,#+24       ;; SignExtS R6,R6,#+24,#+24
   \   000000F0   3616               ASRS     R6,R6,#+24
   \   000000F2   002E               CMP      R6,#+0
   \   000000F4   02D0               BEQ      ??LED_GetLed_7
    166                return gpioPinState;
   \   000000F6   6846               MOV      R0,SP
   \   000000F8   0078               LDRB     R0,[R0, #+0]
   \   000000FA   07E0               B        ??LED_GetLed_4
    167            }
    168            LEDpinsState |= gpioPinState << 3;
   \                     ??LED_GetLed_7:
   \   000000FC   2900               MOVS     R1,R5
   \   000000FE   6846               MOV      R0,SP
   \   00000100   0078               LDRB     R0,[R0, #+0]
   \   00000102   C500               LSLS     R5,R0,#+3
   \   00000104   0D43               ORRS     R5,R5,R1
    169            
    170            return LEDpinsState;
   \   00000106   2800               MOVS     R0,R5
   \   00000108   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000010A   000E               LSRS     R0,R0,#+24
   \                     ??LED_GetLed_4:
   \   0000010C   76BC               POP      {R1,R2,R4-R6}
   \   0000010E   08BC               POP      {R3}
   \   00000110   1847               BX       R3               ;; return
    171            
    172          }
    173          
    174          /******************************************************************************
    175          * LED_ToggleLed
    176          *
    177          * Toggles on or more LEDs. Doesn't check/affect flashing states.
    178          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    179          void LED_ToggleLed(LED_t LEDNr)
    180          {
   \                     LED_ToggleLed:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    181            if (LEDNr & LED1){    
   \   00000004   E007               LSLS     R0,R4,#+31
   \   00000006   02D5               BPL      ??LED_ToggleLed_0
    182              Led1Toggle();
   \   00000008   1720               MOVS     R0,#+23
   \   0000000A   ........           BL       Gpio_TogglePin
    183            }
    184            if (LEDNr & LED2){    
   \                     ??LED_ToggleLed_0:
   \   0000000E   A007               LSLS     R0,R4,#+30
   \   00000010   02D5               BPL      ??LED_ToggleLed_1
    185              Led2Toggle();
   \   00000012   1820               MOVS     R0,#+24
   \   00000014   ........           BL       Gpio_TogglePin
    186            }
    187            if (LEDNr & LED3){    
   \                     ??LED_ToggleLed_1:
   \   00000018   6007               LSLS     R0,R4,#+29
   \   0000001A   02D5               BPL      ??LED_ToggleLed_2
    188              Led3Toggle();
   \   0000001C   1920               MOVS     R0,#+25
   \   0000001E   ........           BL       Gpio_TogglePin
    189            }
    190            if (LEDNr & LED4){    
   \                     ??LED_ToggleLed_2:
   \   00000022   2007               LSLS     R0,R4,#+28
   \   00000024   02D5               BPL      ??LED_ToggleLed_3
    191              Led4Toggle();
   \   00000026   2C20               MOVS     R0,#+44
   \   00000028   ........           BL       Gpio_TogglePin
    192            }
    193          }
   \                     ??LED_ToggleLed_3:
   \   0000002C   10BC               POP      {R4}
   \   0000002E   08BC               POP      {R3}
   \   00000030   1847               BX       R3               ;; return
    194          
    195          /******************************************************************************
    196          * LED_TurnOffLed
    197          *
    198          * Turns off on or more LEDs. Doesn't check/affect flashing states.
    199          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    200          void LED_TurnOffLed(LED_t LEDNr)
    201          {
   \                     LED_TurnOffLed:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    202            if (LEDNr & LED1)
   \   00000004   E007               LSLS     R0,R4,#+31
   \   00000006   03D5               BPL      ??LED_TurnOffLed_0
    203              Led1Off();
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   1720               MOVS     R0,#+23
   \   0000000C   ........           BL       Gpio_SetPinData
    204            if (LEDNr & LED2)
   \                     ??LED_TurnOffLed_0:
   \   00000010   A007               LSLS     R0,R4,#+30
   \   00000012   03D5               BPL      ??LED_TurnOffLed_1
    205              Led2Off();
   \   00000014   0021               MOVS     R1,#+0
   \   00000016   1820               MOVS     R0,#+24
   \   00000018   ........           BL       Gpio_SetPinData
    206            if (LEDNr & LED3)
   \                     ??LED_TurnOffLed_1:
   \   0000001C   6007               LSLS     R0,R4,#+29
   \   0000001E   03D5               BPL      ??LED_TurnOffLed_2
    207              Led3Off();
   \   00000020   0021               MOVS     R1,#+0
   \   00000022   1920               MOVS     R0,#+25
   \   00000024   ........           BL       Gpio_SetPinData
    208            if (LEDNr & LED4)
   \                     ??LED_TurnOffLed_2:
   \   00000028   2007               LSLS     R0,R4,#+28
   \   0000002A   03D5               BPL      ??LED_TurnOffLed_3
    209              Led4Off();
   \   0000002C   0021               MOVS     R1,#+0
   \   0000002E   2C20               MOVS     R0,#+44
   \   00000030   ........           BL       Gpio_SetPinData
    210          }
   \                     ??LED_TurnOffLed_3:
   \   00000034   10BC               POP      {R4}
   \   00000036   08BC               POP      {R3}
   \   00000038   1847               BX       R3               ;; return
    211          
    212          /******************************************************************************
    213          * LED_TurnOnLed
    214          *
    215          * Turn on one or more LEDs. Doesn't check/affect flashing states.
    216          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    217          void LED_TurnOnLed(LED_t LEDNr)
    218          {
   \                     LED_TurnOnLed:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    219            if (LEDNr & LED1)
   \   00000004   E007               LSLS     R0,R4,#+31
   \   00000006   03D5               BPL      ??LED_TurnOnLed_0
    220              Led1On();
   \   00000008   0121               MOVS     R1,#+1
   \   0000000A   1720               MOVS     R0,#+23
   \   0000000C   ........           BL       Gpio_SetPinData
    221            if (LEDNr & LED2)
   \                     ??LED_TurnOnLed_0:
   \   00000010   A007               LSLS     R0,R4,#+30
   \   00000012   03D5               BPL      ??LED_TurnOnLed_1
    222              Led2On();
   \   00000014   0121               MOVS     R1,#+1
   \   00000016   1820               MOVS     R0,#+24
   \   00000018   ........           BL       Gpio_SetPinData
    223            if (LEDNr & LED3)
   \                     ??LED_TurnOnLed_1:
   \   0000001C   6007               LSLS     R0,R4,#+29
   \   0000001E   03D5               BPL      ??LED_TurnOnLed_2
    224              Led3On();
   \   00000020   0121               MOVS     R1,#+1
   \   00000022   1920               MOVS     R0,#+25
   \   00000024   ........           BL       Gpio_SetPinData
    225            if (LEDNr & LED4)
   \                     ??LED_TurnOnLed_2:
   \   00000028   2007               LSLS     R0,R4,#+28
   \   0000002A   03D5               BPL      ??LED_TurnOnLed_3
    226              Led4On();
   \   0000002C   0121               MOVS     R1,#+1
   \   0000002E   2C20               MOVS     R0,#+44
   \   00000030   ........           BL       Gpio_SetPinData
    227          }
   \                     ??LED_TurnOnLed_3:
   \   00000034   10BC               POP      {R4}
   \   00000036   08BC               POP      {R3}
   \   00000038   1847               BX       R3               ;; return
    228          
    229          /******************************************************************************
    230          * LED_TurnOffAllLeds
    231          *
    232          * Turn off all LEDs. Does not affect flashing state.
    233          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    234          void LED_TurnOffAllLeds(void)
    235          {
   \                     LED_TurnOffAllLeds:
   \   00000000   80B5               PUSH     {R7,LR}
    236            LED_TurnOffLed(LED_ALL);
   \   00000002   0F20               MOVS     R0,#+15
   \   00000004   ........           BL       LED_TurnOffLed
    237          }
   \   00000008   09BC               POP      {R0,R3}
   \   0000000A   1847               BX       R3               ;; return
    238          
    239          /******************************************************************************
    240          * LED_TurnOnAllLeds
    241          *
    242          * Turn on all LEDs. Does not affect flashing state.
    243          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    244          void LED_TurnOnAllLeds(void)
    245          {
   \                     LED_TurnOnAllLeds:
   \   00000000   80B5               PUSH     {R7,LR}
    246            LED_TurnOnLed(LED_ALL);
   \   00000002   0F20               MOVS     R0,#+15
   \   00000004   ........           BL       LED_TurnOnLed
    247          }
   \   00000008   09BC               POP      {R0,R3}
   \   0000000A   1847               BX       R3               ;; return
    248          
    249          /******************************************************************************
    250          * LED_StopFlashingAllLeds
    251          *
    252          * Turn off all LEDs and stop flashing.
    253          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    254          void LED_StopFlashingAllLeds(void)
    255          {
   \                     LED_StopFlashingAllLeds:
   \   00000000   80B5               PUSH     {R7,LR}
    256            LED_SetLed(LED_ALL, gLedOff_c);
   \   00000002   0421               MOVS     R1,#+4
   \   00000004   0F20               MOVS     R0,#+15
   \   00000006   ........           BL       LED_SetLed
    257          }
   \   0000000A   09BC               POP      {R0,R3}
   \   0000000C   1847               BX       R3               ;; return
    258          
    259          /******************************************************************************
    260          * LED_StartFlash
    261          *
    262          * Start one or more LEDs flashing
    263          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    264          void LED_StartFlash
    265           (
    266              LED_t LEDNr /* IN: LED Number (may be an OR of the list) */
    267           )
    268          {
   \                     LED_StartFlash:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    269            /* indicate which leds are flashing */
    270            mLedFlashingLEDs |= LEDNr;
   \   00000004   ....               LDR      R0,??DataTable6
   \   00000006   0078               LDRB     R0,[R0, #+0]
   \   00000008   2043               ORRS     R0,R0,R4
   \   0000000A   ....               LDR      R1,??DataTable6
   \   0000000C   0870               STRB     R0,[R1, #+0]
    271          
    272            /* start the timer */
    273            TMR_StartIntervalTimer(mLEDTimerID, mLEDInterval_c, LED_FlashTimeout);
   \   0000000E   ....               LDR      R2,??DataTable6_1
   \   00000010   6421               MOVS     R1,#+100
   \   00000012   ....               LDR      R0,??DataTable6_2
   \   00000014   0078               LDRB     R0,[R0, #+0]
   \   00000016   ........           BL       TMR_StartIntervalTimer
    274          }
   \   0000001A   10BC               POP      {R4}
   \   0000001C   08BC               POP      {R3}
   \   0000001E   1847               BX       R3               ;; return
    275          
    276          #if gLEDBlipEnabled_d
    277          /******************************************************************************
    278          * LED_StartBlip
    279          *
    280          * Set up for blinking one or more LEDs once. 
    281          ******************************************************************************/
    282          void LED_StartBlip ( LED_t LEDNr )
    283          {
    284            uint8_t iLedIndex;
    285          
    286            /* set up for blinking one or more LEDs once */
    287            for(iLedIndex = 0; iLedIndex < 4; ++iLedIndex) 
    288            {
    289              if(LEDNr & (1 << iLedIndex))
    290               mLedBlips[iLedIndex] = 2;   /* blink on, then back off */
    291            }
    292          
    293            /* start flashing */
    294            LED_StartFlash(LEDNr);
    295          }
    296          #endif
    297          
    298          /******************************************************************************
    299          * LED_StopFlash
    300          *
    301          * Stop an LED from flashing.
    302          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    303          void LED_StopFlash
    304            (
    305            LED_t LEDNr /* IN: LED Number. */
    306            )
    307          {
   \                     LED_StopFlash:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    308            /* leave stopped LEDs in the off state */
    309            LED_TurnOffLed(LEDNr);
   \   00000004   2000               MOVS     R0,R4
   \   00000006   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000008   000E               LSRS     R0,R0,#+24
   \   0000000A   ........           BL       LED_TurnOffLed
    310          
    311            /* stop flashing on one or more LEDs */
    312            mLedFlashingLEDs &= (~LEDNr);
   \   0000000E   ....               LDR      R0,??DataTable6
   \   00000010   0078               LDRB     R0,[R0, #+0]
   \   00000012   A043               BICS     R0,R0,R4
   \   00000014   ....               LDR      R1,??DataTable6
   \   00000016   0870               STRB     R0,[R1, #+0]
    313          
    314            /* if ALL LEDs have stopped flashing, then stop timer */
    315            if(!mLedFlashingLEDs)
   \   00000018   ....               LDR      R0,??DataTable6
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   03D1               BNE      ??LED_StopFlash_0
    316              TMR_StopTimer(mLEDTimerID);
   \   00000020   ....               LDR      R0,??DataTable6_2
   \   00000022   0078               LDRB     R0,[R0, #+0]
   \   00000024   ........           BL       TMR_StopTimer
    317          }
   \                     ??LED_StopFlash_0:
   \   00000028   10BC               POP      {R4}
   \   0000002A   08BC               POP      {R3}
   \   0000002C   1847               BX       R3               ;; return
    318          
    319          /******************************************************************************
    320          * LED_StartSerialFlash
    321          *
    322          * Serial flashing lights
    323          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    324          void LED_StartSerialFlash(void)
    325          {
   \                     LED_StartSerialFlash:
   \   00000000   80B5               PUSH     {R7,LR}
    326            /* indicate going into flashing mode (must be done first) */
    327            LED_StartFlash(0);
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   ........           BL       LED_StartFlash
    328          
    329            /* set up for serial lights */
    330            LED_TurnOffAllLeds();
   \   00000008   ........           BL       LED_TurnOffAllLeds
    331            Led1On();
   \   0000000C   0121               MOVS     R1,#+1
   \   0000000E   1720               MOVS     R0,#+23
   \   00000010   ........           BL       Gpio_SetPinData
    332            mLedFlashingLEDs = LED1 | LED2; /* toggle these to on first flash */
   \   00000014   ....               LDR      R0,??DataTable6
   \   00000016   0321               MOVS     R1,#+3
   \   00000018   0170               STRB     R1,[R0, #+0]
    333          
    334            /* indicate in serial flash mode */
    335            mfLedInSerialMode = TRUE;
   \   0000001A   ....               LDR      R0,??DataTable6_3
   \   0000001C   0121               MOVS     R1,#+1
   \   0000001E   0170               STRB     R1,[R0, #+0]
    336          }
   \   00000020   09BC               POP      {R0,R3}
   \   00000022   1847               BX       R3               ;; return
    337          
    338          /******************************************************************************
    339          * LED_DecrementBlink
    340          *
    341          * Decrements the blink count.
    342          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    343          void LED_SetHex
    344            (
    345            uint8_t hexValue
    346            )
    347          {
   \                     LED_SetHex:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    348            LED_SetLed(LED_ALL, gLedOff_c);
   \   00000004   0421               MOVS     R1,#+4
   \   00000006   0F20               MOVS     R0,#+15
   \   00000008   ........           BL       LED_SetLed
    349            LED_SetLed(hexValue, gLedOn_c);
   \   0000000C   0321               MOVS     R1,#+3
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000012   000E               LSRS     R0,R0,#+24
   \   00000014   ........           BL       LED_SetLed
    350          }
   \   00000018   10BC               POP      {R4}
   \   0000001A   08BC               POP      {R3}
   \   0000001C   1847               BX       R3               ;; return
    351          
    352          /******************************************************************************
    353          * LED_SetLed
    354          *
    355          * This fuction can set the Led state in: On, Off, Toggle, Flashing or StopFlash
    356          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    357          void LED_SetLed
    358            (
    359            LED_t LEDNr,    /* IN: mask of LEDs to change */
    360            LedState_t state
    361            )
    362          {
   \                     LED_SetLed:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0C00               MOVS     R4,R1
    363            /* turning off flashing same as off state */
    364            if(state == gLedStopFlashing_c)
   \   00000006   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000008   240E               LSRS     R4,R4,#+24
   \   0000000A   012C               CMP      R4,#+1
   \   0000000C   01D1               BNE      ??LED_SetLed_0
    365              state = gLedOff_c;
   \   0000000E   0420               MOVS     R0,#+4
   \   00000010   0400               MOVS     R4,R0
    366          
    367            /* turn off serial lights if in serial mode */
    368            LED_ExitSerialFlash();
   \                     ??LED_SetLed_0:
   \   00000012   ........           BL       LED_ExitSerialFlash
    369          
    370            /* flash LED */
    371            if(state == gLedFlashing_c)
   \   00000016   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000018   240E               LSRS     R4,R4,#+24
   \   0000001A   002C               CMP      R4,#+0
   \   0000001C   05D1               BNE      ??LED_SetLed_1
    372              LED_StartFlash(LEDNr);
   \   0000001E   2800               MOVS     R0,R5
   \   00000020   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \   00000024   ........           BL       LED_StartFlash
   \   00000028   27E0               B        ??LED_SetLed_2
    373          
    374          #if gLEDBlipEnabled_d
    375            /* blink LEDs */
    376            else if(state == gLedBlip_c)
    377              LED_StartBlip(LEDNr);
    378          #endif
    379          
    380            /* On, Off or Toggle Led*/
    381            else {
    382          
    383              /* on, off or toggle will stop flashing on the LED. Also exits serial mode */
    384              if(mfLedInSerialMode || (mLedFlashingLEDs & LEDNr))
   \                     ??LED_SetLed_1:
   \   0000002A   ....               LDR      R0,??DataTable6_3
   \   0000002C   0078               LDRB     R0,[R0, #+0]
   \   0000002E   0028               CMP      R0,#+0
   \   00000030   03D1               BNE      ??LED_SetLed_3
   \   00000032   ....               LDR      R0,??DataTable6
   \   00000034   0078               LDRB     R0,[R0, #+0]
   \   00000036   2842               TST      R0,R5
   \   00000038   04D0               BEQ      ??LED_SetLed_4
    385                LED_StopFlash(LEDNr);
   \                     ??LED_SetLed_3:
   \   0000003A   2800               MOVS     R0,R5
   \   0000003C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000003E   000E               LSRS     R0,R0,#+24
   \   00000040   ........           BL       LED_StopFlash
    386          
    387              /* Select the operation to be done on the port */
    388              if(state == gLedOn_c)
   \                     ??LED_SetLed_4:
   \   00000044   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000046   240E               LSRS     R4,R4,#+24
   \   00000048   032C               CMP      R4,#+3
   \   0000004A   04D1               BNE      ??LED_SetLed_5
    389                LED_TurnOnLed(LEDNr);
   \   0000004C   2800               MOVS     R0,R5
   \   0000004E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000050   000E               LSRS     R0,R0,#+24
   \   00000052   ........           BL       LED_TurnOnLed
    390              if(state == gLedOff_c)
   \                     ??LED_SetLed_5:
   \   00000056   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000058   240E               LSRS     R4,R4,#+24
   \   0000005A   042C               CMP      R4,#+4
   \   0000005C   04D1               BNE      ??LED_SetLed_6
    391                LED_TurnOffLed(LEDNr);
   \   0000005E   2800               MOVS     R0,R5
   \   00000060   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000062   000E               LSRS     R0,R0,#+24
   \   00000064   ........           BL       LED_TurnOffLed
    392              if(state == gLedToggle_c)
   \                     ??LED_SetLed_6:
   \   00000068   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000006A   240E               LSRS     R4,R4,#+24
   \   0000006C   052C               CMP      R4,#+5
   \   0000006E   04D1               BNE      ??LED_SetLed_2
    393                LED_ToggleLed(LEDNr);
   \   00000070   2800               MOVS     R0,R5
   \   00000072   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000074   000E               LSRS     R0,R0,#+24
   \   00000076   ........           BL       LED_ToggleLed
    394            }
    395          }
   \                     ??LED_SetLed_2:
   \   0000007A   31BC               POP      {R0,R4,R5}
   \   0000007C   08BC               POP      {R3}
   \   0000007E   1847               BX       R3               ;; return
    396          
    397          
    398          /******************************************************************************
    399          *******************************************************************************
    400          * Private functions
    401          *******************************************************************************
    402          ******************************************************************************/
    403          
    404          /******************************************************************************
    405          * LED_ExitSerialFlash
    406          *
    407          * Stop serial flashing mode. Leaves all LEDs off. Only exits if actually in 
    408          * serial mode.
    409          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    410          void LED_ExitSerialFlash(void)
    411          {
   \                     LED_ExitSerialFlash:
   \   00000000   80B5               PUSH     {R7,LR}
    412            if(mfLedInSerialMode) 
   \   00000002   ....               LDR      R0,??DataTable6_3
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   0028               CMP      R0,#+0
   \   00000008   0BD0               BEQ      ??LED_ExitSerialFlash_0
    413            {
    414              mLedFlashingLEDs = 0;   /* no LEDs are currently flashing */
   \   0000000A   ....               LDR      R0,??DataTable6
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   0170               STRB     R1,[R0, #+0]
    415              LED_TurnOffAllLeds();
   \   00000010   ........           BL       LED_TurnOffAllLeds
    416              TMR_StopTimer(mLEDTimerID);
   \   00000014   ....               LDR      R0,??DataTable6_2
   \   00000016   0078               LDRB     R0,[R0, #+0]
   \   00000018   ........           BL       TMR_StopTimer
    417              mfLedInSerialMode = FALSE;
   \   0000001C   ....               LDR      R0,??DataTable6_3
   \   0000001E   0021               MOVS     R1,#+0
   \   00000020   0170               STRB     R1,[R0, #+0]
    418            }
    419          }
   \                     ??LED_ExitSerialFlash_0:
   \   00000022   09BC               POP      {R0,R3}
   \   00000024   1847               BX       R3               ;; return
    420          
    421          #if gLEDBlipEnabled_d
    422          /******************************************************************************
    423          * LED_DecrementBlip
    424          *
    425          * Decrements the blink count.
    426          ******************************************************************************/
    427          static void LED_DecrementBlip(void)
    428          {
    429            uint8_t iLedIndex;
    430          
    431            for(iLedIndex = 0; iLedIndex < 4; ++iLedIndex) 
    432            {
    433              if(mLedBlips[iLedIndex]) 
    434              {
    435                --mLedBlips[iLedIndex];
    436                if(!mLedBlips[iLedIndex])
    437                  mLedFlashingLEDs &= ~(1 << iLedIndex);
    438              }
    439            }
    440          
    441            /* done, stop the timer */
    442            if(!mLedFlashingLEDs)
    443              TMR_StopTimer(mLEDTimerID);
    444          }
    445          #endif
    446          
    447          /******************************************************************************
    448          * LED_FlashTimeout
    449          *
    450          * Flash the selected LED(s).
    451          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    452          static void LED_FlashTimeout
    453            (
    454            uint8_t timerId /* IN: TimerID. */
    455            )
    456          {
   \                     LED_FlashTimeout:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    457            (void)timerId;  /* prevent compiler warning */
    458          
    459            if(mLedFlashingLEDs & LED1)
   \   00000004   ....               LDR      R0,??DataTable6
   \   00000006   0078               LDRB     R0,[R0, #+0]
   \   00000008   C007               LSLS     R0,R0,#+31
   \   0000000A   02D5               BPL      ??LED_FlashTimeout_0
    460              Led1Toggle();
   \   0000000C   1720               MOVS     R0,#+23
   \   0000000E   ........           BL       Gpio_TogglePin
    461            if(mLedFlashingLEDs & LED2)
   \                     ??LED_FlashTimeout_0:
   \   00000012   ....               LDR      R0,??DataTable6
   \   00000014   0078               LDRB     R0,[R0, #+0]
   \   00000016   8007               LSLS     R0,R0,#+30
   \   00000018   02D5               BPL      ??LED_FlashTimeout_1
    462              Led2Toggle();
   \   0000001A   1820               MOVS     R0,#+24
   \   0000001C   ........           BL       Gpio_TogglePin
    463            if(mLedFlashingLEDs & LED3)
   \                     ??LED_FlashTimeout_1:
   \   00000020   ....               LDR      R0,??DataTable6
   \   00000022   0078               LDRB     R0,[R0, #+0]
   \   00000024   4007               LSLS     R0,R0,#+29
   \   00000026   02D5               BPL      ??LED_FlashTimeout_2
    464              Led3Toggle();
   \   00000028   1920               MOVS     R0,#+25
   \   0000002A   ........           BL       Gpio_TogglePin
    465            if(mLedFlashingLEDs & LED4)
   \                     ??LED_FlashTimeout_2:
   \   0000002E   ....               LDR      R0,??DataTable6
   \   00000030   0078               LDRB     R0,[R0, #+0]
   \   00000032   0007               LSLS     R0,R0,#+28
   \   00000034   02D5               BPL      ??LED_FlashTimeout_3
    466              Led4Toggle();
   \   00000036   2C20               MOVS     R0,#+44
   \   00000038   ........           BL       Gpio_TogglePin
    467          
    468          #if gLEDBlipEnabled_d
    469           /* decrement blips */
    470            LED_DecrementBlip();
    471          #endif
    472          
    473           /* if serial lights, move on to next light */
    474            if(mfLedInSerialMode)
   \                     ??LED_FlashTimeout_3:
   \   0000003C   ....               LDR      R0,??DataTable6_3
   \   0000003E   0078               LDRB     R0,[R0, #+0]
   \   00000040   0028               CMP      R0,#+0
   \   00000042   14D0               BEQ      ??LED_FlashTimeout_4
    475            {
    476              mLedFlashingLEDs = mLedFlashingLEDs << 1;
   \   00000044   ....               LDR      R0,??DataTable6
   \   00000046   0078               LDRB     R0,[R0, #+0]
   \   00000048   4000               LSLS     R0,R0,#+1
   \   0000004A   ....               LDR      R1,??DataTable6
   \   0000004C   0870               STRB     R0,[R1, #+0]
    477              if(mLedFlashingLEDs & (LED4 << 1))  /* wrap around */
   \   0000004E   ....               LDR      R0,??DataTable6
   \   00000050   0078               LDRB     R0,[R0, #+0]
   \   00000052   C006               LSLS     R0,R0,#+27
   \   00000054   0BD5               BPL      ??LED_FlashTimeout_4
    478              {
    479                mLedFlashingLEDs &= LED_ALL;
   \   00000056   ....               LDR      R0,??DataTable6
   \   00000058   0078               LDRB     R0,[R0, #+0]
   \   0000005A   0007               LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   0000005C   000F               LSRS     R0,R0,#+28
   \   0000005E   ....               LDR      R1,??DataTable6
   \   00000060   0870               STRB     R0,[R1, #+0]
    480                mLedFlashingLEDs |= LED1;
   \   00000062   ....               LDR      R0,??DataTable6
   \   00000064   0078               LDRB     R0,[R0, #+0]
   \   00000066   0121               MOVS     R1,#+1
   \   00000068   0143               ORRS     R1,R1,R0
   \   0000006A   ....               LDR      R0,??DataTable6
   \   0000006C   0170               STRB     R1,[R0, #+0]
    481              }
    482            }
    483          }
   \                     ??LED_FlashTimeout_4:
   \   0000006E   10BC               POP      {R4}
   \   00000070   08BC               POP      {R3}
   \   00000072   1847               BX       R3               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     mLEDTimerID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     mLedFlashingLEDs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   ........           DC32     LED_FlashTimeout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   ........           DC32     mLEDTimerID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   ........           DC32     mfLedInSerialMode
    484          
    485          
    486          /******************************************************************************
    487          *******************************************************************************
    488          * Unit Testing
    489          *******************************************************************************
    490          ******************************************************************************/
    491          
    492          /* None */
    493          
    494          #endif /* gLEDSupported_d */
    495          

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     LED_ExitSerialFlash          8
     LED_FlashTimeout             8
     LED_GetLed                  24
     LED_Init                     8
     LED_SetHex                   8
     LED_SetLed                  16
     LED_StartFlash               8
     LED_StartSerialFlash         8
     LED_StopFlash                8
     LED_StopFlashingAllLeds      8
     LED_ToggleLed                8
     LED_TurnOffAllLeds           8
     LED_TurnOffLed               8
     LED_TurnOnAllLeds            8
     LED_TurnOnLed                8
     Set_Pins                     8


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     mfLedInSerialMode          1
     mLedFlashingLEDs           1
     mLEDTimerID                1
     LED_Init                  24
     Set_Pins                 154
     LED_GetLed               274
     LED_ToggleLed             50
     LED_TurnOffLed            58
     LED_TurnOnLed             58
     LED_TurnOffAllLeds        12
     LED_TurnOnAllLeds         12
     LED_StopFlashingAllLeds   14
     LED_StartFlash            32
     LED_StopFlash             46
     LED_StartSerialFlash      36
     LED_SetHex                30
     LED_SetLed               128
     LED_ExitSerialFlash       38
     LED_FlashTimeout         116
     ??DataTable3               4
     ??DataTable6               4
     ??DataTable6_1             4
     ??DataTable6_2             4
     ??DataTable6_3             4

 
     2 bytes in section .bss
     1 byte  in section .data
 1 102 bytes in section .text
 
 1 102 bytes of CODE memory
     3 bytes of DATA memory

Errors: none
Warnings: none
