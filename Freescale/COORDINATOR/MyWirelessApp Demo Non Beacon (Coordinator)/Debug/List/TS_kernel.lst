###############################################################################
#                                                                             #
#                                                       15/Oct/2012  16:29:14 #
# IAR ANSI C/C++ Compiler V5.50.7.22081/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Documents and Settings\Administrator\My               #
#                    Documents\MyWirelessApp Demo Non Beacon                  #
#                    (Coordinator)\MyWirelessApp Demo Non Beacon              #
#                    (Coordinator)\SSM\TS\Source\TS_kernel.c                  #
#    Command line =  "C:\Documents and Settings\Administrator\My              #
#                    Documents\MyWirelessApp Demo Non Beacon                  #
#                    (Coordinator)\MyWirelessApp Demo Non Beacon              #
#                    (Coordinator)\SSM\TS\Source\TS_kernel.c" -D              #
#                    gMacStandAlone_d=1 -D gSAPMessagesEnableLlc_d=0 -D       #
#                    gZtcIncluded_d=0 -D gTargetMC1322xNCB=1 --preprocess     #
#                    "C:\Documents and Settings\Administrator\My              #
#                    Documents\MyWirelessApp Demo Non Beacon                  #
#                    (Coordinator)\MyWirelessApp Demo Non Beacon              #
#                    (Coordinator)\Debug\List\" -lC "C:\Documents and         #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\Debug\List\" -lB "C:\Documents and         #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\Debug\List\" --diag_suppress               #
#                    Pe014,Pe001,Pe991,Pa039,Pe520 -o "C:\Documents and       #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\Debug\Obj\" --no_cse --no_unroll           #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little                  #
#                    --cpu=ARM7TDMI-S --fpu=None --dlib_config "C:\Program    #
#                    Files\IAR Systems\Embedded Workbench 5.4                 #
#                    Evaluation\arm\INC\DLib_Config_Normal.h" -I              #
#                    "C:\Documents and Settings\Administrator\My              #
#                    Documents\MyWirelessApp Demo Non Beacon                  #
#                    (Coordinator)\MyWirelessApp Demo Non Beacon              #
#                    (Coordinator)\MacPhy\Interface\" -I "C:\Documents and    #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\Application\Init\" -I "C:\Documents and    #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\Application\Interface\" -I "C:\Documents   #
#                    and Settings\Administrator\My Documents\MyWirelessApp    #
#                    Demo Non Beacon (Coordinator)\MyWirelessApp Demo Non     #
#                    Beacon (Coordinator)\Application\Configure\" -I          #
#                    "C:\Documents and Settings\Administrator\My              #
#                    Documents\MyWirelessApp Demo Non Beacon                  #
#                    (Coordinator)\MyWirelessApp Demo Non Beacon              #
#                    (Coordinator)\Application\UartUtil\" -I "C:\Documents    #
#                    and Settings\Administrator\My Documents\MyWirelessApp    #
#                    Demo Non Beacon (Coordinator)\MyWirelessApp Demo Non     #
#                    Beacon (Coordinator)\Application\Source\" -I             #
#                    "C:\Documents and Settings\Administrator\My              #
#                    Documents\MyWirelessApp Demo Non Beacon                  #
#                    (Coordinator)\MyWirelessApp Demo Non Beacon              #
#                    (Coordinator)\SSM\TS\Interface\" -I "C:\Documents and    #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\SSM\TS\Source\" -I "C:\Documents and       #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\SSM\ZTC\Interface\" -I "C:\Documents and   #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\SSM\ZTC\Source\" -I "C:\Documents and      #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\PLM\Interface\" -I "C:\Documents and       #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\PLM\LibInterface\" -I "C:\Documents and    #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\PLM\Source\Display\" -I "C:\Documents and  #
#                    Settings\Administrator\My Documents\MyWirelessApp Demo   #
#                    Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon   #
#                    (Coordinator)\PLM\Source\Keyboard\" -I "C:\Documents     #
#                    and Settings\Administrator\My Documents\MyWirelessApp    #
#                    Demo Non Beacon (Coordinator)\MyWirelessApp Demo Non     #
#                    Beacon (Coordinator)\PLM\Source\NVM\" -I "C:\Documents   #
#                    and Settings\Administrator\My Documents\MyWirelessApp    #
#                    Demo Non Beacon (Coordinator)\MyWirelessApp Demo Non     #
#                    Beacon (Coordinator)\PLM\Source\TMR\" -I "C:\Documents   #
#                    and Settings\Administrator\My Documents\MyWirelessApp    #
#                    Demo Non Beacon (Coordinator)\MyWirelessApp Demo Non     #
#                    Beacon (Coordinator)\PLM\Source\UART\" -I "C:\Program    #
#                    Files\IAR Systems\Embedded Workbench 5.4                 #
#                    Evaluation\arm\INC\" --interwork --cpu_mode thumb -On    #
#    List file    =  C:\Documents and Settings\Administrator\My               #
#                    Documents\MyWirelessApp Demo Non Beacon                  #
#                    (Coordinator)\MyWirelessApp Demo Non Beacon              #
#                    (Coordinator)\Debug\List\TS_kernel.lst                   #
#    Object file  =  C:\Documents and Settings\Administrator\My               #
#                    Documents\MyWirelessApp Demo Non Beacon                  #
#                    (Coordinator)\MyWirelessApp Demo Non Beacon              #
#                    (Coordinator)\Debug\Obj\TS_kernel.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\My Documents\MyWirelessApp Demo Non Beacon (Coordinator)\MyWirelessApp Demo Non Beacon (Coordinator)\SSM\TS\Source\TS_kernel.c
      1          /*****************************************************************************
      2          * Kernel / task handling implementation.
      3          *
      4          * (c) Copyright 2006, Freescale, Inc. All rights reserved.
      5          *
      6          *
      7          * No part of this document must be reproduced in any form - including copied,
      8          * transcribed, printed or by any electronic means - without specific written
      9          * permission from Freescale Semiconductor Danmark A/S.
     10          *
     11          *
     12          *****************************************************************************/
     13          
     14          #include "FunctionLib.h"
     15          #include "EmbeddedTypes.h"
     16          #include "TS_Interface.h"
     17          #include "TS_Kernel.h"
     18          #include "Interrupt.h"
     19          
     20          
     21          /*****************************************************************************
     22          ******************************************************************************
     23          * Private macros
     24          ******************************************************************************
     25          *****************************************************************************/
     26          
     27          /* Number of elements in an array. */
     28          #ifndef NumberOfElements
     29          #define NumberOfElements(array)     ((sizeof(array) / (sizeof(array[0]))))
     30          #endif
     31          
     32          
     33          /*****************************************************************************
     34          ******************************************************************************
     35          * Private type declarations
     36          ******************************************************************************
     37          *****************************************************************************/
     38          
     39          /* If priority == g_InvalidTaskPriority_c, this entry is not in use. */
     40          typedef struct tsTaskTableEntry_tag {
     41            event_t events;
     42            tsTaskPriority_t priority;
     43            pfTsTaskEventHandler_t pfTaskEventHandler;
     44          } tsTaskTableEntry_t;
     45          
     46          
     47          /*****************************************************************************
     48          ******************************************************************************
     49          * Private memory definitions
     50          ******************************************************************************
     51          *****************************************************************************/
     52          
     53          /* List of task descriptors. */

   \                                 In section .bss, align 4
     54          tsTaskTableEntry_t maTsTaskTable[gTsMaxTasks_c];
   \                     maTsTaskTable:
   \   00000000                      DS8 112
     55          
     56          /* List of task ids (== indexes into maTsTaskTable[]), sorted by task */
     57          /* priority, with the highest priority tasks at lower index positions */
     58          /* in this table. */

   \                                 In section .bss, align 4
     59          tsTaskID_t maTsTaskIDsByPriority[NumberOfElements(maTsTaskTable)];
   \                     maTsTaskIDsByPriority:
   \   00000000                      DS8 16
     60          
     61          #if (gTsDebug_d == TRUE)
     62          static uint16_t TsNonIdleLoopCounter = 0;
     63          static uint16_t TsNonIdleLoopCounterMax = 0;
     64          static uint32_t TsMainLoopCounter = 0;
     65          #endif  /* gTsDebug_d */
     66          
     67          /*****************************************************************************
     68          ******************************************************************************
     69          * Private prototypes
     70          ******************************************************************************
     71          *****************************************************************************/
     72          
     73          /*****************************************************************************
     74          ******************************************************************************
     75          * Public memory definitions
     76          ******************************************************************************
     77          *****************************************************************************/
     78          

   \                                 In section .bss, align 1
     79          tsTaskID_t gIdleTaskID;
   \                     gIdleTaskID:
   \   00000000                      DS8 1
     80          
     81          /*****************************************************************************
     82          ******************************************************************************
     83          * Public functions
     84          ******************************************************************************
     85          *****************************************************************************/
     86          
     87          /* Remove events from a task's event flags. */

   \                                 In section .text, align 2, keep-with-next
     88          void TS_ClearEvent
     89            (
     90            tsTaskID_t taskID,
     91            event_t events
     92            )
     93          {
   \                     TS_ClearEvent:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0C00               MOVS     R4,R1
     94            uint8_t ret;
     95            
     96            ret = IntDisableAll();
   \   00000006   ........           BL       IntDisableAll
   \   0000000A   0600               MOVS     R6,R0
     97            maTsTaskTable[taskID].events &= ~events;
   \   0000000C   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000000E   2D0E               LSRS     R5,R5,#+24
   \   00000010   0820               MOVS     R0,#+8
   \   00000012   6843               MULS     R0,R5,R0
   \   00000014   ....               LDR      R1,??DataTable6
   \   00000016   085A               LDRH     R0,[R1, R0]
   \   00000018   A043               BICS     R0,R0,R4
   \   0000001A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000001C   2D0E               LSRS     R5,R5,#+24
   \   0000001E   0821               MOVS     R1,#+8
   \   00000020   6943               MULS     R1,R5,R1
   \   00000022   ....               LDR      R2,??DataTable6
   \   00000024   5052               STRH     R0,[R2, R1]
     98            IntRestoreAll(ret);
   \   00000026   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000028   360E               LSRS     R6,R6,#+24
   \   0000002A   3000               MOVS     R0,R6
   \   0000002C   ........           BL       IntRestoreAll
     99          }
   \   00000030   70BC               POP      {R4-R6}
   \   00000032   08BC               POP      {R3}
   \   00000034   1847               BX       R3               ;; return
    100          
    101          /****************************************************************************/
    102          
    103          /* Add a task to the task table.
    104           * Return the task ID, or gTsInvalidTaskID_c if the task table is full.
    105           *
    106           * taskPriority == 0 is reserved for the idle task, and must never be specified
    107           * for any other task. TS_CreateTask() does not check for this.
    108           *
    109           * Note that TS_CreateTask() does not prevent a given event handler function
    110           * pointer from being added more than once to the task table.
    111           *
    112           * Note that if TS_CreateTask() is called with a taskPriority that is the
    113           * same as the priority of a task that is already in the task table, the
    114           * two tasks will end up in adjacent slots in the table. Which one is
    115           * called first by the scheduler is not specified.
    116           */

   \                                 In section .text, align 2, keep-with-next
    117          tsTaskID_t TS_CreateTask
    118            (
    119            tsTaskPriority_t taskPriority,
    120            pfTsTaskEventHandler_t pfTaskEventHandler
    121            )
    122          {
   \                     TS_CreateTask:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   0F00               MOVS     R7,R1
    123            index_t i;
    124            index_t freeSlot;
    125            index_t sizeofTaskId = sizeof(maTsTaskIDsByPriority[0]);
   \   00000006   6846               MOV      R0,SP
   \   00000008   0121               MOVS     R1,#+1
   \   0000000A   0170               STRB     R1,[R0, #+0]
    126          
    127            /* Try to find a free slot in the task table. */
    128            for (i = 0, freeSlot = gTsInvalidTaskID_c;
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   0400               MOVS     R4,R0
   \   00000010   FF20               MOVS     R0,#+255
   \   00000012   0500               MOVS     R5,R0
    129                 (i < NumberOfElements(maTsTaskTable));
   \                     ??TS_CreateTask_0:
   \   00000014   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000016   240E               LSRS     R4,R4,#+24
   \   00000018   0E2C               CMP      R4,#+14
   \   0000001A   0CD2               BCS      ??TS_CreateTask_1
    130                 ++i) {
    131              if (maTsTaskTable[i].priority == gTsInvalidTaskPriority_c) {
   \   0000001C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000001E   240E               LSRS     R4,R4,#+24
   \   00000020   0820               MOVS     R0,#+8
   \   00000022   6043               MULS     R0,R4,R0
   \   00000024   ....               LDR      R1,??DataTable6
   \   00000026   0818               ADDS     R0,R1,R0
   \   00000028   8078               LDRB     R0,[R0, #+2]
   \   0000002A   FF28               CMP      R0,#+255
   \   0000002C   01D1               BNE      ??TS_CreateTask_2
    132                freeSlot = i;
   \   0000002E   2500               MOVS     R5,R4
    133                break;
   \   00000030   01E0               B        ??TS_CreateTask_1
    134              }
    135            }                                     /* for (i = 0, freeSlot = 0xFF; ... */
   \                     ??TS_CreateTask_2:
   \   00000032   641C               ADDS     R4,R4,#+1
   \   00000034   EEE7               B        ??TS_CreateTask_0
    136          
    137            if (freeSlot == gTsInvalidTaskID_c) {
   \                     ??TS_CreateTask_1:
   \   00000036   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000038   2D0E               LSRS     R5,R5,#+24
   \   0000003A   FF2D               CMP      R5,#+255
   \   0000003C   01D1               BNE      ??TS_CreateTask_3
    138              return gTsInvalidTaskID_c;
   \   0000003E   FF20               MOVS     R0,#+255
   \   00000040   49E0               B        ??TS_CreateTask_4
    139            }
    140          
    141            maTsTaskTable[freeSlot].events = 0;
   \                     ??TS_CreateTask_3:
   \   00000042   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000044   2D0E               LSRS     R5,R5,#+24
   \   00000046   0820               MOVS     R0,#+8
   \   00000048   6843               MULS     R0,R5,R0
   \   0000004A   ....               LDR      R1,??DataTable6
   \   0000004C   0022               MOVS     R2,#+0
   \   0000004E   0A52               STRH     R2,[R1, R0]
    142            maTsTaskTable[freeSlot].pfTaskEventHandler = pfTaskEventHandler;
   \   00000050   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000052   2D0E               LSRS     R5,R5,#+24
   \   00000054   0820               MOVS     R0,#+8
   \   00000056   6843               MULS     R0,R5,R0
   \   00000058   ....               LDR      R1,??DataTable6
   \   0000005A   0818               ADDS     R0,R1,R0
   \   0000005C   4760               STR      R7,[R0, #+4]
    143            maTsTaskTable[freeSlot].priority = taskPriority;
   \   0000005E   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000060   2D0E               LSRS     R5,R5,#+24
   \   00000062   0820               MOVS     R0,#+8
   \   00000064   6843               MULS     R0,R5,R0
   \   00000066   ....               LDR      R1,??DataTable6
   \   00000068   0818               ADDS     R0,R1,R0
   \   0000006A   8670               STRB     R6,[R0, #+2]
    144          
    145            /* maTsTaskIDsByPriority is maintained in sorted order, so 1) find the */
    146            /* place where this new task should go; 2) move everything up; and 3) add */
    147            /* the new task. */
    148            for (i = 0; i < NumberOfElements(maTsTaskIDsByPriority); i++) {
   \   0000006C   0020               MOVS     R0,#+0
   \   0000006E   0400               MOVS     R4,R0
   \                     ??TS_CreateTask_5:
   \   00000070   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000072   240E               LSRS     R4,R4,#+24
   \   00000074   0E2C               CMP      R4,#+14
   \   00000076   27D2               BCS      ??TS_CreateTask_6
    149              /* If the end of the table is reached, just add the new task. */
    150              if (maTsTaskIDsByPriority[i] == gTsInvalidTaskPriority_c) {
   \   00000078   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000007A   240E               LSRS     R4,R4,#+24
   \   0000007C   ....               LDR      R0,??DataTable6_1
   \   0000007E   005D               LDRB     R0,[R0, R4]
   \   00000080   FF28               CMP      R0,#+255
   \   00000082   21D0               BEQ      ??TS_CreateTask_6
    151                break;
    152              }
    153          
    154              /* If all tasks from this point on have lower priorities than the task */
    155              /* being added, move the rest up and insert the new one. */
    156              if (maTsTaskTable[maTsTaskIDsByPriority[i]].priority < taskPriority) {
   \                     ??TS_CreateTask_7:
   \   00000084   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000086   240E               LSRS     R4,R4,#+24
   \   00000088   ....               LDR      R0,??DataTable6_1
   \   0000008A   005D               LDRB     R0,[R0, R4]
   \   0000008C   0821               MOVS     R1,#+8
   \   0000008E   4843               MULS     R0,R1,R0
   \   00000090   ....               LDR      R1,??DataTable6
   \   00000092   0818               ADDS     R0,R1,R0
   \   00000094   8078               LDRB     R0,[R0, #+2]
   \   00000096   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000098   360E               LSRS     R6,R6,#+24
   \   0000009A   B042               CMP      R0,R6
   \   0000009C   12D2               BCS      ??TS_CreateTask_8
    157                FLib_MemInPlaceCpy(&maTsTaskIDsByPriority[i + 1],
    158                                   &maTsTaskIDsByPriority[i],
    159                                   (NumberOfElements(maTsTaskIDsByPriority) - i - 1) * sizeofTaskId);
   \   0000009E   0D20               MOVS     R0,#+13
   \   000000A0   021B               SUBS     R2,R0,R4
   \   000000A2   6846               MOV      R0,SP
   \   000000A4   0078               LDRB     R0,[R0, #+0]
   \   000000A6   4243               MULS     R2,R0,R2
   \   000000A8   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   000000AA   120E               LSRS     R2,R2,#+24
   \   000000AC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000AE   240E               LSRS     R4,R4,#+24
   \   000000B0   ....               LDR      R0,??DataTable6_1
   \   000000B2   0119               ADDS     R1,R0,R4
   \   000000B4   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000B6   240E               LSRS     R4,R4,#+24
   \   000000B8   ....               LDR      R0,??DataTable6_1
   \   000000BA   0019               ADDS     R0,R0,R4
   \   000000BC   401C               ADDS     R0,R0,#+1
   \   000000BE   ........           BL       FLib_MemInPlaceCpy
    160                break;
   \   000000C2   01E0               B        ??TS_CreateTask_6
    161              }
    162            }                                     /* for (i = 0; ... */
   \                     ??TS_CreateTask_8:
   \   000000C4   641C               ADDS     R4,R4,#+1
   \   000000C6   D3E7               B        ??TS_CreateTask_5
    163            maTsTaskIDsByPriority[i] = freeSlot;
   \                     ??TS_CreateTask_6:
   \   000000C8   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000CA   240E               LSRS     R4,R4,#+24
   \   000000CC   ....               LDR      R0,??DataTable6_1
   \   000000CE   0555               STRB     R5,[R0, R4]
    164          
    165            return freeSlot;
   \   000000D0   2800               MOVS     R0,R5
   \   000000D2   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000D4   000E               LSRS     R0,R0,#+24
   \                     ??TS_CreateTask_4:
   \   000000D6   F2BC               POP      {R1,R4-R7}
   \   000000D8   08BC               POP      {R3}
   \   000000DA   1847               BX       R3               ;; return
    166          }                                       /* TS_CreateTask() */
    167          
    168          /****************************************************************************/
    169          
    170          /* Remove a task from the task table. */

   \                                 In section .text, align 2, keep-with-next
    171          void TS_DestroyTask
    172            (
    173            tsTaskID_t taskID
    174            )
    175          {
   \                     TS_DestroyTask:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0500               MOVS     R5,R0
    176            index_t i;
    177            index_t sizeofTaskId = sizeof(maTsTaskIDsByPriority[0]);
   \   00000004   0120               MOVS     R0,#+1
   \   00000006   0600               MOVS     R6,R0
    178          
    179            if (maTsTaskTable[taskID].priority == gTsInvalidTaskPriority_c) {
   \   00000008   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000000A   2D0E               LSRS     R5,R5,#+24
   \   0000000C   0820               MOVS     R0,#+8
   \   0000000E   6843               MULS     R0,R5,R0
   \   00000010   ....               LDR      R1,??DataTable6
   \   00000012   0818               ADDS     R0,R1,R0
   \   00000014   8078               LDRB     R0,[R0, #+2]
   \   00000016   FF28               CMP      R0,#+255
   \   00000018   2FD0               BEQ      ??TS_DestroyTask_0
    180              return;
    181            }
    182          
    183            /* Mark this slot in the task descriptor table as unused. */
    184            maTsTaskTable[taskID].priority = gTsInvalidTaskPriority_c;
   \                     ??TS_DestroyTask_1:
   \   0000001A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000001C   2D0E               LSRS     R5,R5,#+24
   \   0000001E   0820               MOVS     R0,#+8
   \   00000020   6843               MULS     R0,R5,R0
   \   00000022   ....               LDR      R1,??DataTable6
   \   00000024   0818               ADDS     R0,R1,R0
   \   00000026   FF21               MOVS     R1,#+255
   \   00000028   8170               STRB     R1,[R0, #+2]
    185          
    186            /* Remove this task's ID from the priority table. Find it's position */
    187            /* in the table, and shift everything else down. */
    188            for (i = 0; i < NumberOfElements(maTsTaskIDsByPriority); i++) {
   \   0000002A   0020               MOVS     R0,#+0
   \   0000002C   0400               MOVS     R4,R0
   \                     ??TS_DestroyTask_2:
   \   0000002E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000030   240E               LSRS     R4,R4,#+24
   \   00000032   0E2C               CMP      R4,#+14
   \   00000034   21D2               BCS      ??TS_DestroyTask_3
    189              if (maTsTaskIDsByPriority[i] == taskID) {
   \   00000036   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000038   240E               LSRS     R4,R4,#+24
   \   0000003A   ....               LDR      R0,??DataTable6_1
   \   0000003C   005D               LDRB     R0,[R0, R4]
   \   0000003E   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000040   2D0E               LSRS     R5,R5,#+24
   \   00000042   A842               CMP      R0,R5
   \   00000044   17D1               BNE      ??TS_DestroyTask_4
    190          
    191                FLib_MemCpy(&maTsTaskIDsByPriority[i],
    192                            &maTsTaskIDsByPriority[i + 1],
    193                            (NumberOfElements(maTsTaskIDsByPriority) - i - 1) * sizeofTaskId);
   \   00000046   0D20               MOVS     R0,#+13
   \   00000048   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000004A   240E               LSRS     R4,R4,#+24
   \   0000004C   021B               SUBS     R2,R0,R4
   \   0000004E   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000050   360E               LSRS     R6,R6,#+24
   \   00000052   7243               MULS     R2,R6,R2
   \   00000054   1204               LSLS     R2,R2,#+16       ;; ZeroExtS R2,R2,#+16,#+16
   \   00000056   120C               LSRS     R2,R2,#+16
   \   00000058   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000005A   240E               LSRS     R4,R4,#+24
   \   0000005C   ....               LDR      R0,??DataTable6_1
   \   0000005E   0119               ADDS     R1,R0,R4
   \   00000060   491C               ADDS     R1,R1,#+1
   \   00000062   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000064   240E               LSRS     R4,R4,#+24
   \   00000066   ....               LDR      R0,??DataTable6_1
   \   00000068   0019               ADDS     R0,R0,R4
   \   0000006A   ........           BL       FLib_MemCpy
    194          
    195                /* Note that exactly one entry was removed. */
    196                maTsTaskIDsByPriority[NumberOfElements(maTsTaskIDsByPriority) - 1] = gTsInvalidTaskID_c;
   \   0000006E   ....               LDR      R0,??DataTable6_1
   \   00000070   FF21               MOVS     R1,#+255
   \   00000072   4173               STRB     R1,[R0, #+13]
    197                break;
   \   00000074   01E0               B        ??TS_DestroyTask_3
    198              }
    199            }
   \                     ??TS_DestroyTask_4:
   \   00000076   641C               ADDS     R4,R4,#+1
   \   00000078   D9E7               B        ??TS_DestroyTask_2
    200          
    201            return;
   \                     ??TS_DestroyTask_3:
   \                     ??TS_DestroyTask_0:
   \   0000007A   70BC               POP      {R4-R6}
   \   0000007C   08BC               POP      {R3}
   \   0000007E   1847               BX       R3               ;; return
    202          }                                       /* TS_DestroyTask() */
    203          
    204          /****************************************************************************/
    205          
    206          /* Initialize the task scheduler. */

   \                                 In section .text, align 2, keep-with-next
    207          void TS_Init(void) {
   \                     TS_Init:
   \   00000000   80B5               PUSH     {R7,LR}
    208            FLib_MemSet(maTsTaskTable, gTsInvalidTaskPriority_c, sizeof(maTsTaskTable));
   \   00000002   7022               MOVS     R2,#+112
   \   00000004   FF21               MOVS     R1,#+255
   \   00000006   ....               LDR      R0,??DataTable6
   \   00000008   ........           BL       FLib_MemSet
    209            FLib_MemSet(maTsTaskIDsByPriority, gTsInvalidTaskID_c, sizeof(maTsTaskIDsByPriority));
   \   0000000C   0E22               MOVS     R2,#+14
   \   0000000E   FF21               MOVS     R1,#+255
   \   00000010   ....               LDR      R0,??DataTable6_1
   \   00000012   ........           BL       FLib_MemSet
    210          
    211            gIdleTaskID = TS_CreateTask(gTsIdleTaskPriority_c, IdleTask);
   \   00000016   ....               LDR      R1,??DataTable6_2
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   ........           BL       TS_CreateTask
   \   0000001E   ....               LDR      R1,??DataTable6_3
   \   00000020   0870               STRB     R0,[R1, #+0]
    212          }                                       /* TS_Init() */
   \   00000022   09BC               POP      {R0,R3}
   \   00000024   1847               BX       R3               ;; return
    213          
    214          /****************************************************************************/
    215          
    216          /* Returns true if there are any pending events for any task. */
    217          /* This function must not disable/enable interrupts. If it did, an */
    218          /* an interrupt could be delayed until just after the task table scan, */
    219          /* which might invalidate the result of the scan. The caller should */
    220          /* consider whether or not to dis/enable interrupts before calling. */

   \                                 In section .text, align 2, keep-with-next
    221          bool_t TS_PendingEvents(void) {
   \                     TS_PendingEvents:
   \   00000000   00B5               PUSH     {LR}
    222            index_t i;
    223          
    224            for (i = 0; i < NumberOfElements(maTsTaskTable); i++) {
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0100               MOVS     R1,R0
   \                     ??TS_PendingEvents_0:
   \   00000006   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000008   090E               LSRS     R1,R1,#+24
   \   0000000A   0E29               CMP      R1,#+14
   \   0000000C   14D2               BCS      ??TS_PendingEvents_1
    225              if (( maTsTaskTable[i].priority != gTsInvalidTaskPriority_c)
    226                  && maTsTaskTable[i].events) {
   \   0000000E   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000010   090E               LSRS     R1,R1,#+24
   \   00000012   0820               MOVS     R0,#+8
   \   00000014   4843               MULS     R0,R1,R0
   \   00000016   ....               LDR      R2,??DataTable6
   \   00000018   1018               ADDS     R0,R2,R0
   \   0000001A   8078               LDRB     R0,[R0, #+2]
   \   0000001C   FF28               CMP      R0,#+255
   \   0000001E   09D0               BEQ      ??TS_PendingEvents_2
   \   00000020   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000022   090E               LSRS     R1,R1,#+24
   \   00000024   0820               MOVS     R0,#+8
   \   00000026   4843               MULS     R0,R1,R0
   \   00000028   ....               LDR      R2,??DataTable6
   \   0000002A   105A               LDRH     R0,[R2, R0]
   \   0000002C   0028               CMP      R0,#+0
   \   0000002E   01D0               BEQ      ??TS_PendingEvents_2
    227                return TRUE;
   \   00000030   0120               MOVS     R0,#+1
   \   00000032   02E0               B        ??TS_PendingEvents_3
    228              }
    229            }
   \                     ??TS_PendingEvents_2:
   \   00000034   491C               ADDS     R1,R1,#+1
   \   00000036   E6E7               B        ??TS_PendingEvents_0
    230          
    231            return FALSE;
   \                     ??TS_PendingEvents_1:
   \   00000038   0020               MOVS     R0,#+0
   \                     ??TS_PendingEvents_3:
   \   0000003A   08BC               POP      {R3}
   \   0000003C   1847               BX       R3               ;; return
    232          }
    233          
    234          /****************************************************************************/
    235          
    236          /* Send events to a task. */

   \                                 In section .text, align 2, keep-with-next
    237          void TS_SendEvent
    238            (
    239            tsTaskID_t taskID,
    240            event_t events
    241            )
    242          {
   \                     TS_SendEvent:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0C00               MOVS     R4,R1
    243            uint8_t ret;  
    244            ret = IntDisableAll();
   \   00000006   ........           BL       IntDisableAll
   \   0000000A   0600               MOVS     R6,R0
    245            maTsTaskTable[taskID].events |= events;
   \   0000000C   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000000E   2D0E               LSRS     R5,R5,#+24
   \   00000010   0820               MOVS     R0,#+8
   \   00000012   6843               MULS     R0,R5,R0
   \   00000014   ....               LDR      R1,??DataTable6
   \   00000016   085A               LDRH     R0,[R1, R0]
   \   00000018   2043               ORRS     R0,R0,R4
   \   0000001A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000001C   2D0E               LSRS     R5,R5,#+24
   \   0000001E   0821               MOVS     R1,#+8
   \   00000020   6943               MULS     R1,R5,R1
   \   00000022   ....               LDR      R2,??DataTable6
   \   00000024   5052               STRH     R0,[R2, R1]
    246            IntRestoreAll(ret);
   \   00000026   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000028   360E               LSRS     R6,R6,#+24
   \   0000002A   3000               MOVS     R0,R6
   \   0000002C   ........           BL       IntRestoreAll
    247          }                                       /* TS_SendEvent() */
   \   00000030   70BC               POP      {R4-R6}
   \   00000032   08BC               POP      {R3}
   \   00000034   1847               BX       R3               ;; return
    248          
    249          /****************************************************************************/
    250          
    251          /* BeeStack's main task loop. Never returns. This function is the center of
    252           * the task system.
    253           */

   \                                 In section .text, align 2, keep-with-next
    254          void TS_Scheduler(void) {
   \                     TS_Scheduler:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
    255            index_t activeTask;
    256            uint8_t ret;
    257            event_t events;
    258            index_t i;
    259            index_t taskID;
    260          
    261            /* maTsTaskIDsByPriority[] is maintained in task priority order. If there */
    262            /* are fewer than the maximum number of tasks, the first gInvalidTaskID_c */
    263            /* marks the end of the table. */
    264            for (;;) {
    265              /* Look for the highest priority task that has an event flag set. */
    266              activeTask = gTsIdleTaskID_c;
   \                     ??TS_Scheduler_0:
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0400               MOVS     R4,R0
    267              for (i = 0; i < NumberOfElements(maTsTaskIDsByPriority); ++i) {
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   0500               MOVS     R5,R0
   \                     ??TS_Scheduler_1:
   \   0000000A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000000C   2D0E               LSRS     R5,R5,#+24
   \   0000000E   0E2D               CMP      R5,#+14
   \   00000010   14D2               BCS      ??TS_Scheduler_2
    268                taskID = maTsTaskIDsByPriority[i];
   \   00000012   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000014   2D0E               LSRS     R5,R5,#+24
   \   00000016   ....               LDR      R0,??DataTable6_1
   \   00000018   405D               LDRB     R0,[R0, R5]
   \   0000001A   0600               MOVS     R6,R0
    269                if (taskID == gTsInvalidTaskID_c) {
   \   0000001C   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000001E   360E               LSRS     R6,R6,#+24
   \   00000020   FF2E               CMP      R6,#+255
   \   00000022   0BD0               BEQ      ??TS_Scheduler_2
    270                  break;
    271                }
    272          
    273                if (maTsTaskTable[taskID].events) {
   \                     ??TS_Scheduler_3:
   \   00000024   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000026   360E               LSRS     R6,R6,#+24
   \   00000028   0820               MOVS     R0,#+8
   \   0000002A   7043               MULS     R0,R6,R0
   \   0000002C   ....               LDR      R1,??DataTable6
   \   0000002E   085A               LDRH     R0,[R1, R0]
   \   00000030   0028               CMP      R0,#+0
   \   00000032   01D0               BEQ      ??TS_Scheduler_4
    274                  activeTask = taskID;
   \   00000034   3400               MOVS     R4,R6
    275                  break;
   \   00000036   01E0               B        ??TS_Scheduler_2
    276                }
    277              }
   \                     ??TS_Scheduler_4:
   \   00000038   6D1C               ADDS     R5,R5,#+1
   \   0000003A   E6E7               B        ??TS_Scheduler_1
    278          
    279          #if (gTsDebug_d == TRUE)
    280              /* Record the maximum number of times this loop executes without */
    281              /* a call to the idle task. */
    282              ++TsMainLoopCounter;
    283              if (activeTask == gTsIdleTaskID_c) {
    284                if (TsNonIdleLoopCounterMax < TsNonIdleLoopCounter) {
    285                  TsNonIdleLoopCounterMax = TsNonIdleLoopCounter;
    286                }
    287                TsNonIdleLoopCounter = 0;
    288              } else {
    289                ++TsNonIdleLoopCounter;
    290              }
    291          #endif /* gTsDebug_d */
    292          
    293              /* If there are no outstanding events, call the idle task. */
    294            ret = IntDisableAll();
   \                     ??TS_Scheduler_2:
   \   0000003C   ........           BL       IntDisableAll
   \   00000040   6946               MOV      R1,SP
   \   00000042   0870               STRB     R0,[R1, #+0]
    295              events = maTsTaskTable[activeTask].events;
   \   00000044   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000046   240E               LSRS     R4,R4,#+24
   \   00000048   0820               MOVS     R0,#+8
   \   0000004A   6043               MULS     R0,R4,R0
   \   0000004C   ....               LDR      R1,??DataTable6
   \   0000004E   085A               LDRH     R0,[R1, R0]
   \   00000050   0700               MOVS     R7,R0
    296              maTsTaskTable[activeTask].events = 0;
   \   00000052   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000054   240E               LSRS     R4,R4,#+24
   \   00000056   0820               MOVS     R0,#+8
   \   00000058   6043               MULS     R0,R4,R0
   \   0000005A   ....               LDR      R1,??DataTable6
   \   0000005C   0022               MOVS     R2,#+0
   \   0000005E   0A52               STRH     R2,[R1, R0]
    297              IntRestoreAll(ret);
   \   00000060   6846               MOV      R0,SP
   \   00000062   0078               LDRB     R0,[R0, #+0]
   \   00000064   ........           BL       IntRestoreAll
    298          
    299              (*maTsTaskTable[activeTask].pfTaskEventHandler)(events);
   \   00000068   3800               MOVS     R0,R7
   \   0000006A   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000006C   000C               LSRS     R0,R0,#+16
   \   0000006E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000070   240E               LSRS     R4,R4,#+24
   \   00000072   0821               MOVS     R1,#+8
   \   00000074   6143               MULS     R1,R4,R1
   \   00000076   ....               LDR      R2,??DataTable6
   \   00000078   5118               ADDS     R1,R2,R1
   \   0000007A   4968               LDR      R1,[R1, #+4]
   \   0000007C   ........           BL       __iar_via_R1
   \   00000080   BFE7               B        ??TS_Scheduler_0
    300            }                                     /* for (;;) */
    301          }                                       /* TS_Scheduler() */

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     maTsTaskTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   ........           DC32     maTsTaskIDsByPriority

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   ........           DC32     IdleTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   ........           DC32     gIdleTaskID

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     TS_ClearEvent        16
     TS_CreateTask        24
     TS_DestroyTask       16
     TS_Init               8
     TS_PendingEvents      4
     TS_Scheduler         24
     TS_SendEvent         16


   Section sizes:

     Function/Label        Bytes
     --------------        -----
     maTsTaskTable          112
     maTsTaskIDsByPriority   16
     gIdleTaskID              1
     TS_ClearEvent           54
     TS_CreateTask          220
     TS_DestroyTask         128
     TS_Init                 38
     TS_PendingEvents        62
     TS_SendEvent            54
     TS_Scheduler           130
     ??DataTable6             4
     ??DataTable6_1           4
     ??DataTable6_2           4
     ??DataTable6_3           4
      Others                  2

 
 129 bytes in section .bss
 704 bytes in section .text
 
 702 bytes of CODE memory (+ 2 bytes shared)
 129 bytes of DATA memory

Errors: none
Warnings: none
