###############################################################################
#                                                                             #
#                                                       12/Oct/2015  10:21:27 #
# IAR ANSI C/C++ Compiler V5.50.7.22081/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Documents and Settings\Administrator\Desktop\MyWirele #
#                    ssApp Demo Non Beacon (End Device)\MyWirelessApp Demo    #
#                    Non Beacon (End Device)\PLM\Source\Sound\Sound.c         #
#    Command line =  "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\Sound\Sound.c" -D     #
#                    gMacStandAlone_d=1 -D gSAPMessagesEnableLlc_d=0 -D       #
#                    gZtcIncluded_d=0 -D gTargetMC1322xSRB=1 --preprocess     #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Debug\List\" -lC "C:\Documents   #
#                    and Settings\Administrator\Desktop\MyWirelessApp Demo    #
#                    Non Beacon (End Device)\MyWirelessApp Demo Non Beacon    #
#                    (End Device)\Debug\List\" -lB "C:\Documents and          #
#                    Settings\Administrator\Desktop\MyWirelessApp Demo Non    #
#                    Beacon (End Device)\MyWirelessApp Demo Non Beacon (End   #
#                    Device)\Debug\List\" --diag_suppress                     #
#                    Pe014,Pe001,Pe991,Pa039,Pe520 -o "C:\Documents and       #
#                    Settings\Administrator\Desktop\MyWirelessApp Demo Non    #
#                    Beacon (End Device)\MyWirelessApp Demo Non Beacon (End   #
#                    Device)\Debug\Obj\" --no_cse --no_unroll --no_inline     #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little                  #
#                    --cpu=ARM7TDMI-S --fpu=None --dlib_config "C:\Program    #
#                    Files\IAR Systems\Embedded Workbench 5.4                 #
#                    Evaluation\arm\INC\DLib_Config_Normal.h" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\MacPhy\Interface\" -I            #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Application\Init\" -I            #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Application\Interface\" -I       #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Application\Configure\" -I       #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Application\UartUtil\" -I        #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\Application\Source\" -I          #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\SSM\TS\Interface\" -I            #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\SSM\TS\Source\" -I               #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\SSM\ZTC\Interface\" -I           #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\SSM\ZTC\Source\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Interface\" -I               #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\LibInterface\" -I            #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\Display\" -I          #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\Keyboard\" -I         #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\NVM\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\TMR\" -I              #
#                    "C:\Documents and Settings\Administrator\Desktop\MyWirel #
#                    essApp Demo Non Beacon (End Device)\MyWirelessApp Demo   #
#                    Non Beacon (End Device)\PLM\Source\UART\" -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 5.4     #
#                    Evaluation\arm\INC\" --interwork --cpu_mode thumb -On    #
#    List file    =  C:\Documents and Settings\Administrator\Desktop\MyWirele #
#                    ssApp Demo Non Beacon (End Device)\MyWirelessApp Demo    #
#                    Non Beacon (End Device)\Debug\List\Sound.lst             #
#    Object file  =  C:\Documents and Settings\Administrator\Desktop\MyWirele #
#                    ssApp Demo Non Beacon (End Device)\MyWirelessApp Demo    #
#                    Non Beacon (End Device)\Debug\Obj\Sound.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Administrator\Desktop\MyWirelessApp Demo Non Beacon (End Device)\MyWirelessApp Demo Non Beacon (End Device)\PLM\Source\Sound\Sound.c
      1          /************************************************************************************
      2          * MC1322x Buzzer routines
      3          *
      4          * Copyright (c) 2007, Freescale, Inc. All rights reserved.
      5          *
      6          *
      7          * No part of this document must be reproduced in any form - including copied,
      8          * transcribed, printed or by any electronic means - without specific written
      9          * permission from Freescale Semiconductor.
     10          *
     11          *****************************************************************************/
     12          #include "EmbeddedTypes.h"
     13          #include "AppToPlatformConfig.h"
     14          #include "Sound.h"
     15          #include "Timer.h"
     16          #include "I2C_Interface.h"
     17          #include "GPIO_Interface.h"
     18          #if gHaveBuzzer_c
     19          /************************************************************************************
     20          *************************************************************************************
     21          * Private macros
     22          *************************************************************************************
     23          ************************************************************************************/
     24          #define mBeepFreqinKHz_c  4
     25          #define mToggleCompareValue_c  (SYSTEM_CLOCK/(mBeepFreqinKHz_c * 2))
     26          #define  mSLAVE_DEV_ADDRESS_c  0x50
     27          #define  mVREG_CMD_c           0x11
     28          #define  gGpioBeepTimer_c     ((GpioPin_t)((uint8_t)gGpioPin8_c + (uint8_t)gBeepTimer_c))
     29          /************************************************************************************
     30          *************************************************************************************
     31          * Private type definitions
     32          
     33          *************************************************************************************
     34          ************************************************************************************/
     35          
     36          /************************************************************************************
     37          *************************************************************************************
     38          * Private prototypes
     39          *************************************************************************************
     40          ************************************************************************************/
     41          
     42          static void BuzzerTimerCallBack(TmrNumber_t tmrNumber);
     43          static void Llc_VolumeInit(void);
     44          static void Llc_VolumeSet(uint8_t volume);
     45          /************************************************************************************
     46          *************************************************************************************
     47          * Public memory declarations
     48          *************************************************************************************
     49          ************************************************************************************/
     50          
     51          /************************************************************************************
     52          *************************************************************************************
     53          * Private memory declarations
     54          *************************************************************************************
     55          ************************************************************************************/

   \                                 In section .bss, align 4
     56          uint32_t mMsCounter;
   \                     mMsCounter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     57          uint32_t mBeepDuration;
   \                     mBeepDuration:
   \   00000000                      DS8 4
     58          
     59          /************************************************************************************
     60          *************************************************************************************
     61          * Public functions
     62          *************************************************************************************
     63          ************************************************************************************/
     64          

   \                                 In section .text, align 2, keep-with-next
     65          bool_t BuzzerInit(void)
     66          {
   \                     BuzzerInit:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   85B0               SUB      SP,SP,#+20
     67            TmrConfig_t tmrConfig;
     68            TmrStatusCtrl_t tmrStatusCtrl;
     69            TmrComparatorStatusCtrl_t tmrComparatorStatusCtrl;
     70            /* Enable hw timer 1 */
     71            TmrEnable(gBeepTimer_c);
   \   00000004   0320               MOVS     R0,#+3
   \   00000006   ........           BL       TmrEnable
     72            /* Don't stat the timer yet */ 
     73            if (gTmrErrNoError_c != TmrSetMode(gBeepTimer_c, gTmrNoOperation_c)) /*set timer mode no operation*/
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   0320               MOVS     R0,#+3
   \   0000000E   ........           BL       TmrSetMode
   \   00000012   0028               CMP      R0,#+0
   \   00000014   01D0               BEQ      ??BuzzerInit_0
     74            {
     75              return FALSE;
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   5CE0               B        ??BuzzerInit_1
     76            }
     77            /* Register the callback executed when an interrupt occur */
     78            if(gTmrErrNoError_c != TmrSetCallbackFunction(gBeepTimer_c, gTmrComp1Event_c, BuzzerTimerCallBack))
   \                     ??BuzzerInit_0:
   \   0000001A   ....               LDR      R2,??DataTable2
   \   0000001C   0021               MOVS     R1,#+0
   \   0000001E   0320               MOVS     R0,#+3
   \   00000020   ........           BL       TmrSetCallbackFunction
   \   00000024   0028               CMP      R0,#+0
   \   00000026   01D0               BEQ      ??BuzzerInit_2
     79            {
     80              return FALSE;
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   53E0               B        ??BuzzerInit_1
     81            }
     82            tmrStatusCtrl.uintValue = 0x0000;
   \                     ??BuzzerInit_2:
   \   0000002C   6846               MOV      R0,SP
   \   0000002E   0021               MOVS     R1,#+0
   \   00000030   8180               STRH     R1,[R0, #+4]
     83            tmrStatusCtrl.bitFields.OEN = 1;    //output enable
   \   00000032   6846               MOV      R0,SP
   \   00000034   8088               LDRH     R0,[R0, #+4]
   \   00000036   0121               MOVS     R1,#+1
   \   00000038   0143               ORRS     R1,R1,R0
   \   0000003A   6846               MOV      R0,SP
   \   0000003C   8180               STRH     R1,[R0, #+4]
     84            if (gTmrErrNoError_c != TmrSetStatusControl(gBeepTimer_c, &tmrStatusCtrl))
   \   0000003E   01A9               ADD      R1,SP,#+4
   \   00000040   0320               MOVS     R0,#+3
   \   00000042   ........           BL       TmrSetStatusControl
   \   00000046   0028               CMP      R0,#+0
   \   00000048   01D0               BEQ      ??BuzzerInit_3
     85            {
     86              return FALSE;
   \   0000004A   0020               MOVS     R0,#+0
   \   0000004C   42E0               B        ??BuzzerInit_1
     87            }  
     88            tmrComparatorStatusCtrl.uintValue = 0x0000;
   \                     ??BuzzerInit_3:
   \   0000004E   6846               MOV      R0,SP
   \   00000050   0021               MOVS     R1,#+0
   \   00000052   0180               STRH     R1,[R0, #+0]
     89            tmrComparatorStatusCtrl.bitFields.TCF1EN = TRUE; /* Enable Compare 1 interrupt */
   \   00000054   6846               MOV      R0,SP
   \   00000056   0088               LDRH     R0,[R0, #+0]
   \   00000058   4021               MOVS     R1,#+64
   \   0000005A   0143               ORRS     R1,R1,R0
   \   0000005C   6846               MOV      R0,SP
   \   0000005E   0180               STRH     R1,[R0, #+0]
     90            if (gTmrErrNoError_c != TmrSetCompStatusControl(gBeepTimer_c, &tmrComparatorStatusCtrl))
   \   00000060   6946               MOV      R1,SP
   \   00000062   0320               MOVS     R0,#+3
   \   00000064   ........           BL       TmrSetCompStatusControl
   \   00000068   0028               CMP      R0,#+0
   \   0000006A   01D0               BEQ      ??BuzzerInit_4
     91            {
     92              return FALSE;
   \   0000006C   0020               MOVS     R0,#+0
   \   0000006E   31E0               B        ??BuzzerInit_1
     93            }
     94            tmrConfig.tmrOutputMode = gTmrToggleOF_c; 
   \                     ??BuzzerInit_4:
   \   00000070   6846               MOV      R0,SP
   \   00000072   0321               MOVS     R1,#+3
   \   00000074   0172               STRB     R1,[R0, #+8]
     95            tmrConfig.tmrCoInit = FALSE;  /*co-chanel counter/timers can not force a re-initialization of this counter/timer*/
   \   00000076   02A8               ADD      R0,SP,#+8
   \   00000078   0021               MOVS     R1,#+0
   \   0000007A   4170               STRB     R1,[R0, #+1]
     96            tmrConfig.tmrCntDir = FALSE;  /*count-up*/
   \   0000007C   02A8               ADD      R0,SP,#+8
   \   0000007E   0021               MOVS     R1,#+0
   \   00000080   8170               STRB     R1,[R0, #+2]
     97            tmrConfig.tmrCntLen = TRUE;  /*count until compare*/
   \   00000082   02A8               ADD      R0,SP,#+8
   \   00000084   0121               MOVS     R1,#+1
   \   00000086   C170               STRB     R1,[R0, #+3]
     98            tmrConfig.tmrCntOnce = FALSE;   /*count repeatedly*/
   \   00000088   02A8               ADD      R0,SP,#+8
   \   0000008A   0021               MOVS     R1,#+0
   \   0000008C   0171               STRB     R1,[R0, #+4]
     99            tmrConfig.tmrSecondaryCntSrc = gTmrSecondaryCnt0Input_c;    /*secondary count source not needed*/
   \   0000008E   02A8               ADD      R0,SP,#+8
   \   00000090   0021               MOVS     R1,#+0
   \   00000092   4171               STRB     R1,[R0, #+5]
    100            tmrConfig.tmrPrimaryCntSrc = gTmrPrimaryClkDiv1_c;    /*primary count source is IP BUS clock divide by 1 prescaler*/
   \   00000094   02A8               ADD      R0,SP,#+8
   \   00000096   0821               MOVS     R1,#+8
   \   00000098   8171               STRB     R1,[R0, #+6]
    101            if (gTmrErrNoError_c != TmrSetConfig(gBeepTimer_c, &tmrConfig))  /*set timer configuration */
   \   0000009A   02A9               ADD      R1,SP,#+8
   \   0000009C   0320               MOVS     R0,#+3
   \   0000009E   ........           BL       TmrSetConfig
   \   000000A2   0028               CMP      R0,#+0
   \   000000A4   01D0               BEQ      ??BuzzerInit_5
    102            {
    103              return FALSE;
   \   000000A6   0020               MOVS     R0,#+0
   \   000000A8   14E0               B        ??BuzzerInit_1
    104            }
    105            /* Config timer to raise interrupts each 0.1 ms */
    106            SetComp1Val(gBeepTimer_c, mToggleCompareValue_c);
   \                     ??BuzzerInit_5:
   \   000000AA   ....               LDR      R0,??DataTable2_1  ;; 0x80007060
   \   000000AC   ....               LDR      R1,??DataTable2_2  ;; 0xbb8
   \   000000AE   0180               STRH     R1,[R0, #+0]
    107            /* Config timer to start from 0 after compare event */
    108            SetLoadVal(gBeepTimer_c, 0);
   \   000000B0   ....               LDR      R0,??DataTable2_3  ;; 0x80007066
   \   000000B2   0021               MOVS     R1,#+0
   \   000000B4   0180               STRH     R1,[R0, #+0]
    109            I2c_Init();
   \   000000B6   ........           BL       I2c_Init
    110            Gpio_SetPinFunction(gGpioBeepTimer_c, gGpioAlternate1Mode_c); 
   \   000000BA   0121               MOVS     R1,#+1
   \   000000BC   0B20               MOVS     R0,#+11
   \   000000BE   ........           BL       Gpio_SetPinFunction
    111            Gpio_SetPinFunction(gGpioPin12_c, gGpioAlternate1Mode_c);
   \   000000C2   0121               MOVS     R1,#+1
   \   000000C4   0C20               MOVS     R0,#+12
   \   000000C6   ........           BL       Gpio_SetPinFunction
    112            Gpio_SetPinFunction(gGpioPin13_c, gGpioAlternate1Mode_c);
   \   000000CA   0121               MOVS     R1,#+1
   \   000000CC   0D20               MOVS     R0,#+13
   \   000000CE   ........           BL       Gpio_SetPinFunction
    113            return TRUE;
   \   000000D2   0120               MOVS     R0,#+1
   \                     ??BuzzerInit_1:
   \   000000D4   05B0               ADD      SP,SP,#+20
   \   000000D6   08BC               POP      {R3}
   \   000000D8   1847               BX       R3               ;; return
    114          }
    115          
    116          /***********************************************************************************/
    117          

   \                                 In section .text, align 2, keep-with-next
    118          bool_t BuzzerBeep (void) 
    119          {
   \                     BuzzerBeep:
   \   00000000   80B5               PUSH     {R7,LR}
    120            if( gBeepDurationInMs_c == 0 )
    121              return FALSE;
    122            if (gTmrErrNoError_c != TmrSetMode(gBeepTimer_c, gTmrNoOperation_c)) /*set timer mode no operation*/
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   0320               MOVS     R0,#+3
   \   00000006   ........           BL       TmrSetMode
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   01D0               BEQ      ??BuzzerBeep_0
    123            {
    124              return FALSE;
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   16E0               B        ??BuzzerBeep_1
    125            }
    126            mMsCounter = 0;
   \                     ??BuzzerBeep_0:
   \   00000012   ....               LDR      R0,??DataTable2_4
   \   00000014   0021               MOVS     R1,#+0
   \   00000016   0160               STR      R1,[R0, #+0]
    127            mBeepDuration = gBeepDurationInMs_c;
   \   00000018   ....               LDR      R0,??DataTable2_5
   \   0000001A   FA21               MOVS     R1,#+250
   \   0000001C   0160               STR      R1,[R0, #+0]
    128            SetCntrVal(gBeepTimer_c, 0) ; /*clear counter*/
   \   0000001E   ....               LDR      R0,??DataTable2_6  ;; 0x8000706a
   \   00000020   0021               MOVS     R1,#+0
   \   00000022   0180               STRH     R1,[R0, #+0]
    129            Llc_VolumeInit();
   \   00000024   ........           BL       Llc_VolumeInit
    130            Llc_VolumeSet(gBeepVolumeInPrc_c);   
   \   00000028   1E20               MOVS     R0,#+30
   \   0000002A   ........           BL       Llc_VolumeSet
    131            if (gTmrErrNoError_c != TmrSetMode(gBeepTimer_c, gTmrCntRiseEdgPriSrc_c))
   \   0000002E   0121               MOVS     R1,#+1
   \   00000030   0320               MOVS     R0,#+3
   \   00000032   ........           BL       TmrSetMode
   \   00000036   0028               CMP      R0,#+0
   \   00000038   01D0               BEQ      ??BuzzerBeep_2
    132            {
    133              return FALSE;
   \   0000003A   0020               MOVS     R0,#+0
   \   0000003C   00E0               B        ??BuzzerBeep_1
    134            }
    135            return TRUE;
   \                     ??BuzzerBeep_2:
   \   0000003E   0120               MOVS     R0,#+1
   \                     ??BuzzerBeep_1:
   \   00000040   0ABC               POP      {R1,R3}
   \   00000042   1847               BX       R3               ;; return
    136          }
    137          
    138          /************************************************************************************
    139          *************************************************************************************
    140          * Private functions
    141          *************************************************************************************
    142          ************************************************************************************/
    143          

   \                                 In section .text, align 2, keep-with-next
    144          static void BuzzerTimerCallBack(TmrNumber_t tmrNumber)
    145          {
   \                     BuzzerTimerCallBack:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    146            mMsCounter++;
   \   00000004   ....               LDR      R0,??DataTable2_4
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   401C               ADDS     R0,R0,#+1
   \   0000000A   ....               LDR      R1,??DataTable2_4
   \   0000000C   0860               STR      R0,[R1, #+0]
    147            if(mMsCounter >= mBeepFreqinKHz_c<<1)
   \   0000000E   ....               LDR      R0,??DataTable2_4
   \   00000010   0068               LDR      R0,[R0, #+0]
   \   00000012   0828               CMP      R0,#+8
   \   00000014   0FD3               BCC      ??BuzzerTimerCallBack_0
    148            {
    149              mMsCounter = 0;
   \   00000016   ....               LDR      R0,??DataTable2_4
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   0160               STR      R1,[R0, #+0]
    150              mBeepDuration --;
   \   0000001C   ....               LDR      R0,??DataTable2_5
   \   0000001E   0068               LDR      R0,[R0, #+0]
   \   00000020   401E               SUBS     R0,R0,#+1
   \   00000022   ....               LDR      R1,??DataTable2_5
   \   00000024   0860               STR      R0,[R1, #+0]
    151              if(mBeepDuration == 0)
   \   00000026   ....               LDR      R0,??DataTable2_5
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   0028               CMP      R0,#+0
   \   0000002C   03D1               BNE      ??BuzzerTimerCallBack_0
    152              {
    153                TmrSetMode(gBeepTimer_c, gTmrNoOperation_c);    //stop timer  
   \   0000002E   0021               MOVS     R1,#+0
   \   00000030   0320               MOVS     R0,#+3
   \   00000032   ........           BL       TmrSetMode
    154              }
    155            }
    156          }
   \                     ??BuzzerTimerCallBack_0:
   \   00000036   10BC               POP      {R4}
   \   00000038   08BC               POP      {R3}
   \   0000003A   1847               BX       R3               ;; return
    157          
    158          /***********************************************************************************/
    159          

   \                                 In section .text, align 2, keep-with-next
    160          static void Llc_VolumeInit(void)
    161          {
   \                     Llc_VolumeInit:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   83B0               SUB      SP,SP,#+12
    162            I2cConfig_t i2cConfig;
    163            I2c_Enable();
   \   00000004   ........           BL       I2c_Enable
    164            i2cConfig.i2cBroadcastEn = FALSE;
   \   00000008   6846               MOV      R0,SP
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   0171               STRB     R1,[R0, #+4]
    165            i2cConfig.freqDivider   = 0x20;
   \   0000000E   6846               MOV      R0,SP
   \   00000010   2021               MOVS     R1,#+32
   \   00000012   4170               STRB     R1,[R0, #+1]
    166            i2cConfig.saplingRate   = 0x01;
   \   00000014   6846               MOV      R0,SP
   \   00000016   0121               MOVS     R1,#+1
   \   00000018   8170               STRB     R1,[R0, #+2]
    167            i2cConfig.slaveAddress   = 0x00;
   \   0000001A   6846               MOV      R0,SP
   \   0000001C   0021               MOVS     R1,#+0
   \   0000001E   0170               STRB     R1,[R0, #+0]
    168            i2cConfig.i2cInterruptEn = FALSE; 
   \   00000020   6846               MOV      R0,SP
   \   00000022   0021               MOVS     R1,#+0
   \   00000024   C170               STRB     R1,[R0, #+3]
    169            I2c_SetConfig(&i2cConfig);
   \   00000026   6846               MOV      R0,SP
   \   00000028   ........           BL       I2c_SetConfig
    170          }
   \   0000002C   0FBC               POP      {R0-R3}
   \   0000002E   1847               BX       R3               ;; return
    171          
    172          /***********************************************************************************/
    173          

   \                                 In section .text, align 2, keep-with-next
    174          static void Llc_VolumeSet(uint8_t volume)
    175          {
   \                     Llc_VolumeSet:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
   \   00000004   0400               MOVS     R4,R0
    176            uint8_t buffer[2];
    177            if(volume > (uint8_t)100)
   \   00000006   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000008   240E               LSRS     R4,R4,#+24
   \   0000000A   652C               CMP      R4,#+101
   \   0000000C   01D3               BCC      ??Llc_VolumeSet_0
    178            {
    179              volume = 100; /* Limit volume to 100% */
   \   0000000E   6420               MOVS     R0,#+100
   \   00000010   0400               MOVS     R4,R0
    180            }
    181            /* Scale down the volume value to 0 - 31 range */
    182            volume = (volume * 31) / 100;
   \                     ??Llc_VolumeSet_0:
   \   00000012   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000014   240E               LSRS     R4,R4,#+24
   \   00000016   1F20               MOVS     R0,#+31
   \   00000018   4443               MULS     R4,R0,R4
   \   0000001A   2000               MOVS     R0,R4
   \   0000001C   6421               MOVS     R1,#+100
   \   0000001E   ........           BL       __aeabi_idiv
   \   00000022   0400               MOVS     R4,R0
    183            buffer[0] = mVREG_CMD_c;
   \   00000024   6846               MOV      R0,SP
   \   00000026   1121               MOVS     R1,#+17
   \   00000028   0170               STRB     R1,[R0, #+0]
    184            buffer[1] = (volume & 0xFF) << 3;
   \   0000002A   6846               MOV      R0,SP
   \   0000002C   E100               LSLS     R1,R4,#+3
   \   0000002E   4170               STRB     R1,[R0, #+1]
    185            I2c_SendData(mSLAVE_DEV_ADDRESS_c, &buffer[0], 2, gI2cMstrReleaseBus_c);
   \   00000030   0123               MOVS     R3,#+1
   \   00000032   0222               MOVS     R2,#+2
   \   00000034   6946               MOV      R1,SP
   \   00000036   5020               MOVS     R0,#+80
   \   00000038   ........           BL       I2c_SendData
    186          }
   \   0000003C   13BC               POP      {R0,R1,R4}
   \   0000003E   08BC               POP      {R3}
   \   00000040   1847               BX       R3               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     BuzzerTimerCallBack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   60700080           DC32     0x80007060

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   B80B0000           DC32     0xbb8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   66700080           DC32     0x80007066

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   ........           DC32     mMsCounter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   ........           DC32     mBeepDuration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   6A700080           DC32     0x8000706a
    187          
    188          #endif 
    189           
    190           

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     BuzzerBeep               8
     BuzzerInit              24
     BuzzerTimerCallBack      8
     Llc_VolumeInit          16
     Llc_VolumeSet           16


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     mMsCounter             4
     mBeepDuration          4
     BuzzerInit           218
     BuzzerBeep            68
     BuzzerTimerCallBack   60
     Llc_VolumeInit        48
     Llc_VolumeSet         66
     ??DataTable2           4
     ??DataTable2_1         4
     ??DataTable2_2         4
     ??DataTable2_3         4
     ??DataTable2_4         4
     ??DataTable2_5         4
     ??DataTable2_6         4

 
   8 bytes in section .bss
 488 bytes in section .text
 
 488 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
